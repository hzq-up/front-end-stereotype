<map version="1.0.0"><node ID="38862413-092B-459F-9D44-F42B889B15F5" BACKGROUND_COLOR="#FFFFFF" TEXT="React &#29983;&#21629;&#21608;&#26399;" COLOR="#415229" POSITION="right" STYLE="bubble"><edge COLOR="#ADD424" WIDTH="4" /><font NAME="PingFangSC-Medium" SIZE="18" /><node ID="8100A7DE-6526-4DAC-927C-86F63DC7F77A" TEXT="&#26032;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="E5E335E5-846F-4B53-A74D-D5DCF8C03C42" TEXT="" COLOR="#46443C" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="222A4599-DDD7-46C2-8BEC-9C3E6A8A0903" TEXT="reconciler &#38454;&#27573;&#30340;&#38057;&#23376;&#31216;&#20043;&#20026;&#36731;&#37327;&#38057;&#23376;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="8A0DF2A4-2D01-425B-99D7-33DD0929AF66" TEXT="&#37117;&#19981;&#24212;&#25805;&#20316;DOM" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="73ED8C94-C278-4867-816F-963D4E48544D" TEXT="&#26368;&#22909;&#20063;&#19981;&#35201; setState" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="D8BBF1CB-2738-456E-AD94-AF64B199F664" TEXT="commit &#38454;&#27573;&#30340;&#38057;&#23376;&#21017;&#23545;&#24212;&#31216;&#20043;&#20026;&#37325;&#37327;&#38057;&#23376;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="43F59160-B389-4385-ABB7-083348DED101" TEXT="static getDerivedStateFromProps" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>为什么，为什么，为什么，我要在标题前面写上</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>“</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>静态函数</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>”</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>这几个字？</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> </p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>静态函数的特点就是，他不属于任何一个实例，因此，他的内部</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> this </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>指向并不是组件的本身。这样的结果直接导致了，用户不能做以下几个事情：</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>	1.	</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>用</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>this.refs....</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>	2.	</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>用</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>this.</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>上的任何方法</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>这样的设计，能够使得</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> getDerivedStateFromProps </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>这个函数强迫变成一个纯函数，逻辑也相对简单，就没那么多错误了。</span></p><p></p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>作者：方正</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>链接：</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>https://www.zhihu.com/question/278328905/answer/399344422</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>来源：知乎</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></body>
</html>
</richcontent>
<node ID="6A1B2BF2-9B90-4704-BCDA-197C3EA2B75A" TEXT="&#19982; willReceiveProps &#31867;&#20284;&#65292;&#20294;&#26159;&#20026;&#38745;&#24577;&#26041;&#27861;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="0308CF8A-49CB-4E3A-899B-222AE1F8BE35" TEXT="&#39318;&#27425;&#28210;&#26579;&#20250;&#34987;&#35843;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><linktarget ID="Arrow_ID_F58441AF-A06C-4FDC-8502-9EDC9685DFD7_0308CF8A-49CB-4E3A-899B-222AE1F8BE35" STARTARROW="None" COLOR="#9B9EEA" SOURCE="F58441AF-A06C-4FDC-8502-9EDC9685DFD7" ENDARROW="Default" /></node>
<node ID="A4C64B64-436C-4711-88FC-91AF858E3328" TEXT="&#29992;&#20110;&#24403;&#21069;&#32452;&#20214;&#20381;&#36182;&#20110; props &#30340;&#25913;&#21464;&#24773;&#20917;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><linktarget ID="Arrow_ID_BC57B303-B3CF-478D-9073-EC456150F86B_A4C64B64-436C-4711-88FC-91AF858E3328" STARTARROW="None" COLOR="#9B9EEA" SOURCE="BC57B303-B3CF-478D-9073-EC456150F86B" ENDARROW="Default" /></node>
<node ID="440CBDB6-557A-4DAB-8D2B-BB088232EC01" TEXT="&#26367;&#25442;&#30340;&#21407;&#22240;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="491E5BE4-7D5C-4884-98C2-4405AE31CC04" TEXT="&#31526;&#21512;&#35821;&#20041;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="C9818D0D-E09C-4369-B164-C225EC827F00" TEXT="&#19981;&#33021;&#25805;&#20316; instance&#65292;&#23601;&#38459;&#27490;&#20102;&#22810;&#27425;&#25805;&#20316; setState" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="682BA913-C867-4602-BFBF-F7F949347FF5" TEXT="&#30001;&#20110;&#27809;&#26377; instance,&#20063;&#23601;&#27809;&#26377;&#160;instance.refs.xxx&#65292;&#26080;&#27861;&#25805;&#20316;DOM&#20102;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="43FB8901-A8EB-4C7E-BB55-7D4AB9E976B5" TEXT="&#21462;&#20195; componentWillMount &#19982; componentWillReceiveProps" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="77E24508-44FA-4551-98A3-66D1E6AEF378" TEXT="getSnapshotBeforeUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>In the above example, componentWillUpdate is used to read the DOM property. However with async rendering, there may be delays between “render” phase lifecycles (like componentWillUpdate and render) and “commit” phase lifecycles (like componentDidUpdate). If the user does something like resize the window during this time, the scrollHeight value read from componentWillUpdate will be stale.</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>The solution to this problem is to use the new “commit” phase lifecycle, getSnapshotBeforeUpdate. This method gets called immediately before mutations are made (e.g. before the DOM is updated). It can return a value for React to pass as a parameter to componentDidUpdate, which gets called immediately after mutations.</p></body>
</html>
</richcontent>
<node ID="015F4C22-4F64-46E0-89D9-47FA09E9BB20" TEXT="&#19968;&#33324;&#29992;&#20110;&#33719;&#21462; render &#20043;&#21069;&#30340; dom &#25968;&#25454;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="0F49D3D9-3353-45F6-9657-1AA9DF718887" TEXT="&#33719;&#21462;&#32452;&#20214;&#26356;&#26032;&#20043;&#21069;&#30340;&#28378;&#21160;&#26465;&#20301;&#32622;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="2506B84E-0A53-47EF-A1B3-BC5BAAEB72AD" TEXT="componentDidCatch" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>class ErrorBoundary extends React.Component {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  state = { hasError: false };</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  static getDerivedStateFromError(error) {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    return { hasError: true };</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  }</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  componentDidCatch(error, info) {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    logComponentStackToMyService(info.componentStack);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  }</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  render() {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    if (this.state.hasError) {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    }</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    return this.props.children; </p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  }</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}</p></body>
</html>
</richcontent>
<node ID="053A0A3F-E8FA-4B7B-8DF1-E5AAB216CDCC" TEXT="&#20165;&#22312;&#24322;&#24120;&#21457;&#29983;&#22312; commit &#38454;&#27573;&#26102;&#35843;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="F2FA545A-2ECD-4D22-8D67-B758F98B369F" TEXT="&#25191;&#34892;&#21103;&#20316;&#29992;&#65292;&#27604;&#22914;&#25171;&#21360;&#26085;&#24535;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="369D4032-BDA2-4F28-A595-FC6A3F5D8D71" TEXT="&#19981;&#20250;&#22312;&#26381;&#21153;&#31471;&#28210;&#26579;&#26102;&#35843;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="69938A94-B4AC-4CD9-968A-AD1BD6F9A41D" TEXT="static getDerivedStateFromError" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="D5D82569-2CA8-445D-8C79-30C917FFE6E6" TEXT="&#20165;&#22312;&#24322;&#24120;&#21457;&#29983;&#22312; render &#38454;&#27573;&#26102;&#35843;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="29D68B52-5DDE-4170-BA29-CAAF085F17D0" TEXT="&#19981;&#20801;&#35768;&#26377;&#21103;&#20316;&#29992;&#65292;&#35774;&#32622; state&#65292;&#20351;&#24471;&#19979;&#19968;&#27425;&#28210;&#26579;&#26174;&#31034; fallback ui" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="4A3B33DB-E8C1-4313-8032-D21C04E603F8" TEXT="&#20250;&#22312;&#26381;&#21153;&#31471;&#28210;&#26579;&#26102;&#35843;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="FB7AAC9B-9003-47E5-AC09-61D38CC52F3A" TEXT="&#38454;&#27573;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="2542AFC7-0249-47C3-B979-87AB259ACEAA" TEXT="&#25346;&#36733;&#21644;&#21368;&#36733;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="2179549F-D5AC-4C00-A2AB-23F892EBB679" TEXT="componentWillMount" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="28B1C574-6D69-48DF-BC7A-50C8D9D18C76" TEXT="render" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="52E7DF3C-FFBE-4252-B083-71C5044FE616" TEXT="componentDidMount" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="9A118AFB-0CC7-4C88-A3DE-63AFCAA94D16" TEXT="componentWillUnmount" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="8E8315E1-3FF3-4917-AEC7-94906AC51BE7" TEXT="&#25509;&#25910;&#26032;&#25968;&#25454;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="D2858D09-B25B-4CFC-A910-6497EBA881B9" TEXT="componentWillReceiveProps" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>每一次点击事件都会重新使用</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>setState</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>接口对</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>state</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>进行更新，但每次更新的值都是相同的，即</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>number:1</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>。并且把当前组件的状态以属性的形式传递给</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>&lt;MyButton /&gt;</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>。问题来了，那么当我每次点击按钮时，按钮</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>MyButton</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>的</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>componentWillReceiveProps</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>都会被调用吗？</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>会，即使每次更新的值都是一样的。</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>之所以出现这样的情况原因其实非常简单，因为</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>React</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>并不知道传入的属性是否发生了更改。而为什么</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>React</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>不尝试去做一个是否相等的判断呢？</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>因为办不到，新传入的属性和旧属性可能引用的是同一块内存区域（引用类型），所以单纯的用</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>===</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>判断是否相等并不准确。可行的解决办法之一就是对数据进行深度拷贝然后进行比较，但是这对大型数据结构来说性能太差，还能会碰上循环引用的问题。</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>所以</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>React</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>将这个变化通过钩子函数暴露出来，千万不要以为当</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>componentWillReceiveProps</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>被调用就意味着</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>props</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>发生了更改，如果需要在变化时做一些事情，务必要手动的进行比较</span></p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>作者：李熠</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>链接：</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>https://juejin.im/post/5a0852325188255ea95b6f26</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>来源：掘金</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></body>
</html>
</richcontent>
<node ID="0E324BD3-DD2A-4D51-9572-1D434645B9D3" TEXT="&#22914;&#26524;&#32452;&#20214;&#26159;&#30001;&#29238;&#32452;&#20214;&#26356;&#26032;&#23376;&#32452;&#20214;&#30340; props &#32780;&#26356;&#26032;&#30340;&#65292;&#20250;&#20808;&#25191;&#34892;&#26412;&#26041;&#27861;&#65292;&#27492;&#22788;&#35843;&#29992; setState &#19981;&#20250;&#23548;&#33268;&#20108;&#27425;&#28210;&#26579;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="FC1444D8-6004-41C3-95DC-CDE5A4F654E8" TEXT="&#21363;&#20351;&#24403;&#21069;&#32452;&#20214;&#19981;&#26356;&#26032;&#65292;&#21482;&#35201;&#29238;&#32452;&#20214;&#26356;&#26032;&#20063;&#20250;&#24341;&#21457;&#36825;&#20010;&#20989;&#25968;&#34987;&#35843;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="F58441AF-A06C-4FDC-8502-9EDC9685DFD7" TEXT="&#39318;&#27425;&#28210;&#26579;&#19981;&#20250;&#35843;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /><arrowlink ID="Arrow_ID_F58441AF-A06C-4FDC-8502-9EDC9685DFD7_0308CF8A-49CB-4E3A-899B-222AE1F8BE35" DESTINATION="0308CF8A-49CB-4E3A-899B-222AE1F8BE35" STARTARROW="None" COLOR="#9B9EEA" ENDARROW="Default" /></node>
<node ID="BC57B303-B3CF-478D-9073-EC456150F86B" TEXT="&#29992;&#20110;&#24403;&#21069;&#32452;&#20214;&#20381;&#36182;&#20110; props &#30340;&#25913;&#21464;&#24773;&#20917;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /><arrowlink ID="Arrow_ID_BC57B303-B3CF-478D-9073-EC456150F86B_A4C64B64-436C-4711-88FC-91AF858E3328" DESTINATION="A4C64B64-436C-4711-88FC-91AF858E3328" STARTARROW="None" COLOR="#9B9EEA" ENDARROW="Default" /></node>
<node ID="A377C046-B30F-49E1-B05A-5609938B1817" TEXT="&#26367;&#20195;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="84AAFDBD-F36C-456D-8467-241150779D17" TEXT="&#22914;&#26524;&#20320;&#38656;&#35201;&#25191;&#34892;&#21103;&#20316;&#29992;&#65288;&#20363;&#22914;&#65292;&#25968;&#25454;&#25552;&#21462;&#25110;&#21160;&#30011;&#65289;&#20197;&#21709;&#24212; props &#20013;&#30340;&#26356;&#25913;&#65292;&#35831;&#25913;&#29992; componentDidUpdate &#29983;&#21629;&#21608;&#26399;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="449EB45D-8FF5-4D8A-939F-00E07C69B7B6" TEXT="&#22914;&#26524;&#20320;&#20351;&#29992; componentWillReceiveProps &#20165;&#22312; prop &#26356;&#25913;&#26102;&#37325;&#26032;&#35745;&#31639;&#26576;&#20123;&#25968;&#25454;&#65292;&#35831;&#20351;&#29992; memoization helper &#20195;&#26367;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="BA7AB666-531D-40F8-A98D-B55976FADC72" TEXT="&#22914;&#26524;&#20320;&#20351;&#29992; componentWillReceiveProps &#26159;&#20026;&#20102;&#22312; prop &#26356;&#25913;&#26102;&#8220;&#37325;&#32622;&#8221;&#26576;&#20123; state&#65292;&#35831;&#32771;&#34385;&#20351;&#32452;&#20214;&#23436;&#20840;&#21463;&#25511;&#25110;&#20351;&#29992; key &#20351;&#32452;&#20214;&#23436;&#20840;&#19981;&#21463;&#25511; &#20195;&#26367;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="4510A5AB-DFB8-4DD8-BB86-DA3A86021EE6" TEXT="shouldComponentUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="2B3ED7D1-166E-4180-A2C0-0B8AEB13EABF" TEXT="&#24403;&#36820;&#22238; false &#26102;&#65292;&#32452;&#20214;&#19981;&#20877;&#21521;&#19979;&#25191;&#34892;&#29983;&#21629;&#21608;&#26399;&#26041;&#27861;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="0FDFC865-6216-40A1-950C-51BE9C6BA96C" TEXT="componentWillUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="D5033353-2087-4B5C-9464-2B47E85C28E0" TEXT="&#35843;&#29992; setState &#36827;&#20837;&#27515;&#24490;&#29615;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="C6FC9415-CF7F-44AF-8C06-08E21202AB51" TEXT="render" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="7BB5CCAC-C117-4410-B8C3-CDEF3CA17B3E" TEXT="componentDidUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="76D08ACB-CBAC-4D50-8768-6991BE488F43" TEXT="&#25346;&#36733;&#21644;&#21368;&#36733;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="D19A83E9-2F71-4F6E-94BA-073C36CEAB53" TEXT="componentWillMount" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="117F4645-C5BF-4353-83C4-3C21EE2D3225" TEXT="static getDerivedStateFromProps" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="E4A935C6-DB92-4BA3-AC0B-B9C2B6BF0910" TEXT="render" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="A5BBEAB3-1C9B-4FEE-849E-E26D463255B3" TEXT="componentDidMount" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="81E65BCA-ABBA-4D35-8F5D-F8A04FE1276A" TEXT="componentWillUnmount" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="5A80C7C2-0D10-4F74-AA0C-8E639B16A5C9" TEXT="&#25509;&#25910;&#26032;&#25968;&#25454;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="D7B296BA-3C2B-424E-8E01-EF2CA08DCF2F" TEXT="static getDerivedStateFromProps" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="CFF3B0D3-483D-4E4A-8353-18C7414CFFF5" TEXT="shouldComponentUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="FC468794-3B29-4210-91D2-9E50F25632D2" TEXT="render" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="28718428-06BB-4EF0-80F6-635E510CA14B" TEXT="getSnapshotBeforeUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="40B75976-AC81-400C-89CC-73EC7F2020A8" TEXT="&#29992;&#20110;&#26367;&#20195; willUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(27, 29, 30, 1.000000); font: 15px "Arial"; -cocoa-font-postscriptname: "ArialMT"; '>In the above example, componentWillUpdate is used to read the DOM property. However with async rendering, there may be delays between “render” phase lifecycles (like componentWillUpdate and render) and “commit” phase lifecycles (like componentDidUpdate). If the user does something like resize the window during this time, the scrollHeight value read from componentWillUpdate will be stale.</p><p style='color: rgba(27, 29, 30, 1.000000); font: 15px "Arial"; -cocoa-font-postscriptname: "ArialMT"; '>The solution to this problem is to use the new “commit” phase lifecycle, getSnapshotBeforeUpdate. This method gets called immediately before mutations are made (e.g. before the DOM is updated). It can return a value for React to pass as a parameter to componentDidUpdate, which gets called immediately after mutations.</p></body>
</html>
</richcontent>
<node ID="4647DD6D-0797-4DD0-A2DC-9FEF378F525C" TEXT="commit &#38454;&#27573;&#65292;&#22240;&#27492;&#36825;&#20010;&#20989;&#25968;&#21482;&#20250;&#36816;&#34892;&#19968;&#27425;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="2" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="B06D616A-8646-4CCB-9639-08F416C2798C" TEXT="getSnapshotBeforeUpdate &#26367;&#25442;&#20043;&#21069; willxxxx&#65292;&#32473;&#24819;&#35835;&#21462; dom &#30340;&#29992;&#25143;&#19968;&#20123;&#31354;&#38388;&#65292;&#24378;&#36924;&#29992;&#25143;&#21040; mount &#38454;&#27573;&#25165;&#33021;&#25805;&#20316; dom" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="2" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="B68FD1AF-E5A4-460C-859D-31E3D92732A2" TEXT="&#25509;&#25910;&#21442;&#25968;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="6840A402-25B6-49CE-99CC-CD1F6380152B" TEXT="prevProps" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="2" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="6552599D-14C0-4D35-9FFE-72140F35CAC1" TEXT="prevState" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="2" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="EDB6108C-BE6B-46CC-B41D-19BCFC504F30" TEXT="&#36820;&#22238;&#20540;&#20256;&#36882;&#32473; componentDidUpdate &#30340;&#31532;&#19977;&#20010;&#21442;&#25968;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="59E8C621-2E0C-46A4-BAA9-3DB64B127E8D" TEXT="componentDidUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="7B5CBADC-3322-4674-8D34-57C594CEFE92" TEXT="&#38169;&#35823;&#22788;&#29702;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>class ErrorBoundary extends React.Component {</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  constructor(props) {</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    super(props);</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    this.state = { hasError: false };</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p></p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  static getDerivedStateFromError(error) {</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    // Update state so the next render will show the fallback UI.</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    return { hasError: true };</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p></p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  componentDidCatch(error, info) {</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    // Example &quot;componentStack&quot;:</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    //   in ComponentThatThrows (created by App)</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    //   in ErrorBoundary (created by App)</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    //   in div (created by App)</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    //   in App</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    logComponentStackToMyService(info.componentStack);</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p></p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  render() {</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    if (this.state.hasError) {</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>      // You can render any custom fallback UI</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    }</p><p></p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    return this.props.children; </p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(183, 145, 184, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>}</p></body>
</html>
</richcontent>
<node ID="303C27D7-16DD-4B4C-A14F-0123A1EE8943" TEXT="static getDerivedStateFromError" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 1.000000); font: 17px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>In the event of an error</span><span style='color: rgba(0, 0, 0, 1.000000); font: 17px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>,</span><span style='color: rgba(0, 0, 0, 1.000000); font: 17px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> you can render a fallback UI with </span><span style='color: rgba(20, 20, 20, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>componentDidCatch()</span><span style='color: rgba(0, 0, 0, 1.000000); font: 17px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> by calling </span><span style='color: rgba(20, 20, 20, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>setState</span><span style='color: rgba(0, 0, 0, 1.000000); font: 17px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>,</span><span style='color: rgba(0, 0, 0, 1.000000); font: 17px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> but this will be deprecated in a future release. Use </span><span style='color: rgba(20, 20, 20, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>static getDerivedStateFromError()</span><span style='color: rgba(0, 0, 0, 1.000000); font: 17px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> to handle fallback rendering instead.</span></p></body>
</html>
</richcontent>
<node ID="CF93A6CC-1F0B-44EF-B01A-E0D89FC6B55E" TEXT="&#25429;&#33719; render phase &#30340;&#24322;&#24120;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="70510797-0FAF-41C4-8727-E6637123212B" TEXT="componentDidCatch" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="B0F4769F-BF3A-497C-B102-5CF1DC40B176" TEXT="&#25429;&#33719; commit phase &#30340;&#24322;&#24120;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="E0AF0746-25E6-458C-82D5-3DECFAAF3395" TEXT="&#24223;&#24323;&#37096;&#20998;&#29983;&#21629;&#21608;&#26399;&#30340;&#21407;&#22240;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '>Well, we’ve just learned that because the </span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 16px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>render</span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '> phase doesn’t produce side-effects like DOM updates, React can process updates asynchronously to components asynchronously (potentially even doing it in multiple threads). However, the lifecycles marked with </span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 16px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>UNSAFE</span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '> have often been misunderstood and subtly misused. Developers tended to put the code with side-effects inside these methods which may cause problems with the new async rendering approach. Although only their counterparts without the </span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 16px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>UNSAFE</span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 21px "Georgia"; -cocoa-font-postscriptname: "Georgia-Bold"; '> </span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '>prefix will be removed, they are still likely to cause issues in the upcoming Concurrent Mode (which you can opt out of).</span></p></body>
</html>
</richcontent>
</node>
</node>
<node ID="09FD230D-F911-4063-872F-496FE8F1F36B" TEXT="&#21407;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="2282D2D1-2166-4267-ACFE-807A8F7652E2" TEXT="componentWillMount" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="270BC94F-9B8B-4DEF-B8F9-AF7DCA2FC818" TEXT="componentDidMount" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="62931D38-AE5F-4EC5-B7A7-39283AE84880" TEXT="render" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="B72F4703-1DD1-437A-96B1-F1F385EE963F" TEXT="componentWillUpdate" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="EAD9A594-B765-4F24-B245-E940748C9D7D" TEXT="componentDidUpdate" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="02DD4A53-6087-4A27-80BF-5BDADA958CDF" TEXT="componentWillUnmount" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="A412A302-A18B-47AC-93AD-CCCCDF9AD3C0" TEXT="componentWillReceiveProps" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="225F6AC6-BB65-46CB-916F-858DC9206845" TEXT="props &#25913;&#21464;&#26102;&#65292;&#35302;&#21457;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="36F445E1-2D3D-4145-926B-B853B020F271" TEXT="&#29238;&#32452;&#20214;&#23548;&#33268;&#23376;&#32452;&#20214;&#37325;&#26032;&#28210;&#26579;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>当旧的</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>props</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>和新的</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>props</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>实际上是相同的物理对象时（只更改了对象的内部值），由于引用是</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>triple-equals-equal</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>，所以进行相等性的检查并不能告诉我们该值是否已更改，唯一可能的解决方案是创建数据的深层拷贝，然后再进行深入比较。但对于大型数据结构（特别是具有周期的数据结构）而言，所花费的代价可能过于昂贵。</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>props</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>对象可能会包含</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>对函数的引用，这些函数可能会捕获闭包中的变量。</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>而</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>React</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>无法窥视这些闭包，因此</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>React</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>无法拷贝它们</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>or</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>验证相等性。</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>props</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>对象可能包含对父对象渲染过程中重新实例化的对象的引用（即不是</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>triple-equals-equal</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>），但在概念上相等（即相同的键和相同的值）。深度比较（代价昂贵）可以检测到这一点，除了函数，因为没有可靠的方法来比较两个函数以判断它们是否在语义上等价。</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>--------------------- </p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>作者：</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>huanghanqian </span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>来源：</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>CSDN </span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>原文：</span><span style='color: rgba(0, 0, 0, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>https://blog.csdn.net/huanghanqian/article/details/80721575 </span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>版权声明：本文为博主原创文章，转载请附上博文链接！</p></body>
</html>
</richcontent>
<node ID="E480D4DF-CDD7-4390-A4EE-F2CC4B91BDE1" TEXT="&#35813;&#26041;&#27861;&#20173;&#28982;&#25191;&#34892;&#65292;&#21363;&#20351;&#23376;&#32452;&#20214; props &#27809;&#21464;&#21270;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="8783BD0D-22FA-4BD8-B8D0-96E3B27EBD51" TEXT="&#20351;&#29992;&#22330;&#26223;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="6EA15501-37C0-4985-8BE4-8E7EE013B9D0" TEXT="&#20351;&#29992;&#26032;&#30340; props &#26356;&#26032;&#20869;&#37096; state" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
</node>
</node>
</map>
