<map version="1.0.0"><node ID="60669D8B-AD0A-42FF-8203-D93270E30B98" BACKGROUND_COLOR="#FFFFFF" TEXT="React hooks" COLOR="#415229" POSITION="right" STYLE="bubble"><edge COLOR="#ADD424" WIDTH="4" /><font NAME="PingFangSC-Medium" SIZE="18" /><node ID="6C52F88F-4256-4BDC-B2DB-B84A22B87486" TEXT="&#21160;&#26426;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EEA600" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="78766F0E-800A-4631-9013-E69227800A44" TEXT="&#32452;&#20214;&#29366;&#24577;&#36923;&#36753;&#38590;&#20197;&#22797;&#29992;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EEA600" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="12F68024-E240-4C2C-8C0D-B9B60C7DB72A" TEXT="&#22797;&#26434;&#32452;&#20214;&#21464;&#24471;&#38590;&#20197;&#29702;&#35299;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EEA600" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="52B8907E-DE54-4416-A844-6558B055E50F" TEXT="&#31867;&#32452;&#20214;&#35753;&#20154;&#21644;&#26426;&#22120;&#37117;&#24863;&#21040;&#36855;&#24785;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EEA600" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="365BA96F-AC15-4430-A73B-604E6A23FD86" TEXT="&#20248;&#28857;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#FFE52A" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="B20A6D77-B000-4D37-AF21-4E9E31CE1411" TEXT="&#32452;&#20214;&#29366;&#24577;&#36923;&#36753;&#22797;&#29992;&#26041;&#20415;&#65292;UI &#21644;&#29366;&#24577;&#36923;&#36753;&#20998;&#31163;&#26356;&#24443;&#24213;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#FFE52A" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>1. 多个状态不会产生嵌套，写法还是平铺的（</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>renderProps </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>可以通过</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> compose </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>解决，可不但使用略为繁琐，而且因为强制封装一个新对象而增加了实体数量）。</span></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>2. Hooks </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>可以引用其他</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Hooks</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>。</span></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>3. 更容易将组件的</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> UI </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>与状态分离。</span></p></body>
</html>
</richcontent>
</node>
<node ID="45E7D26B-013D-4AEB-B9DF-91B22064AE20" TEXT="&#20174;&#29983;&#21629;&#21608;&#26399;&#36716;&#21040; Hooks&#65292;&#20195;&#30721;&#26356;&#32039;&#20945;&#19981;&#30772;&#30862;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#FFE52A" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="A4D9EDD5-5141-4F6F-BF71-1AAC4582442E" TEXT="&#26356;&#23569;&#30340;&#24515;&#26234;&#36127;&#25285;&#65292;&#21033;&#20110;&#26426;&#22120;&#20248;&#21270;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#FFE52A" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="D4E5D706-7671-45A8-9DEE-9876A4E36631" TEXT="&#21407;&#22240;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '>We know that components and top-down data flow help us organize a large UI into small, independent, reusable pieces. </span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 21px "Georgia"; -cocoa-font-postscriptname: "Georgia-Bold"; '>However, we often can’t break complex components down any further because the logic is stateful and can’t be extracted to a function or another component.</span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '> Sometimes that’s what people mean when they say React doesn’t let them “separate concerns.”</span></p></body>
</html>
</richcontent>
<node ID="65F307C8-A1D6-4EE9-AE19-96939638C9F2" TEXT="&#20351;&#25105;&#20204;&#33021;&#22815;&#23558;&#32452;&#20214;&#20869;&#37096;&#30340;&#36923;&#36753;&#32452;&#32455;&#20026;&#21487;&#22797;&#29992;&#30340;&#29420;&#31435;&#21333;&#20803;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 0.843137); font: bold 21px "Georgia"; -cocoa-font-postscriptname: "Georgia-Bold"; '>Hooks are fully encapsulated</span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 21px "Lucida Grande"; -cocoa-font-postscriptname: "LucidaGrande-Bold"; '> </span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 21px "Georgia"; -cocoa-font-postscriptname: "Georgia-Bold"; '>—</span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 21px "Lucida Grande"; -cocoa-font-postscriptname: "LucidaGrande-Bold"; '> </span><span style='color: rgba(0, 0, 0, 0.843137); font: bold 21px "Georgia"; -cocoa-font-postscriptname: "Georgia-Bold"; '>each time you call a Hook, it gets isolated local state within the currently executing component.</span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '> This doesn’t matter for this particular example (window width is the same for all components!), but it’s what makes Hooks so powerful. They’re not a way to share </span><span style='color: rgba(0, 0, 0, 0.843137); font: italic 21px "Georgia"; -cocoa-font-postscriptname: "Georgia-Italic"; '>state</span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Lucida Grande"; -cocoa-font-postscriptname: "LucidaGrande"; '> </span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '>—</span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Lucida Grande"; -cocoa-font-postscriptname: "LucidaGrande"; '> </span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '>but a way to share </span><span style='color: rgba(0, 0, 0, 0.843137); font: italic 21px "Georgia"; -cocoa-font-postscriptname: "Georgia-Italic"; '>stateful logic</span><span style='color: rgba(0, 0, 0, 0.843137); font: 21px "Georgia"; -cocoa-font-postscriptname: "Georgia"; '>. We don’t want to break the top-down data flow!</span></p></body>
</html>
</richcontent>
</node>
<node ID="28AB82CB-43EB-41E9-A0BA-F936F6995175" TEXT="&#26412;&#36136;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="E3050505-764B-4CAC-AD0A-4107B9B22287" TEXT="&#23558;&#38754;&#21521;&#29983;&#21629;&#21608;&#26399;&#32534;&#31243;&#21464;&#25104;&#38754;&#21521;&#19994;&#21153;&#36923;&#36753;&#32534;&#31243;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="BFB2FBB6-7213-4137-ACBC-0A01E892FB9B" TEXT="&#20320;&#19981;&#29992;&#20877;&#21435;&#20851;&#24515;&#26412;&#19981;&#35813;&#20851;&#24515;&#30340;&#29983;&#21629;&#21608;&#26399;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
</node>
<node ID="2C7D375B-DA32-44A3-965E-E5C51F867B40" TEXT="api" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="6" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="73988F54-BFA6-44A5-8F7C-C42D81F3CAF0" TEXT="useState" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(135, 135, 117, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>// </span><span style='color: rgba(135, 135, 117, 1.000000); font: 11px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>使用</span><span style='color: rgba(135, 135, 117, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>useState Hook</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> Counter = () =&gt; {</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </span><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> [count, setCount] = useState(</span><span style='color: rgba(14, 110, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>0</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>);</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </span><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> increment = () =&gt; setCount(count + </span><span style='color: rgba(14, 110, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>1</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>);</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </span><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>return</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> (</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;div&gt;</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>        </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;h1&gt;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>{count}</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;/h1&gt;</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>        </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;button </span><span style='color: rgba(14, 110, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>onClick</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>=</span><span style='color: rgba(209, 0, 52, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>{increment}</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&gt;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>+</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;/button&gt;</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;/div&gt;</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  );</p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>};</p></body>
</html>
</richcontent>
<node ID="F2CB34D5-6DAA-4C20-B7D4-E1A45F10EBEC" TEXT="&#20256;&#20837;&#21021;&#22987;&#20540;&#65292;&#36820;&#22238;&#25968;&#32452;&#65292;&#160;&#31532;&#19968;&#20010;&#20803;&#32032;&#23601;&#26159; state &#30340;&#20540;&#65292;&#31532;&#20108;&#20010;&#20803;&#32032;&#26159;&#26356;&#26032; state &#30340;&#20989;&#25968;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="DE25E5B7-D364-4C17-A6A9-A7FEEF6D3677" TEXT="useEffect" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>import</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> { useState, useEffect } </span><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>from</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> </span><span style='color: rgba(209, 0, 52, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&apos;react&apos;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>;</span></p><p></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> Counter = () =&gt; {</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </span><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> [count, setCount] = useState(</span><span style='color: rgba(14, 110, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>0</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>);</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  useEffect(() =&gt; {</p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(14, 114, 163, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>document</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>.title = </span><span style='color: rgba(209, 0, 52, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>`Count: </span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>${count}</span><span style='color: rgba(209, 0, 52, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>`</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>;</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  });</p><p></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </span><span style='color: rgba(38, 38, 38, 1.000000); font: bold 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Bold"; '>return</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> (</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;div&gt;</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>       </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;div&gt;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>{count}</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;/div&gt;</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>       </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;button </span><span style='color: rgba(14, 110, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>onClick</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>=</span><span style='color: rgba(209, 0, 52, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>{()</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> =&gt;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> setCount(count + 1)}&gt;+</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;/button&gt;</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>       </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;button </span><span style='color: rgba(14, 110, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>onClick</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>=</span><span style='color: rgba(209, 0, 52, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>{()</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> =&gt;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> setCount(count - 1)}&gt;-</span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;/button&gt;</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(0, 0, 108, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>&lt;/div&gt;</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  );</p><p style='color: rgba(38, 38, 38, 1.000000); font: 11px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>};</p></body>
</html>
</richcontent>
<node ID="CEFD3B1C-B40A-440C-BDD7-25F832DAA3D6" TEXT="&#20256;&#20837;&#22238;&#35843;&#20989;&#25968;&#65292;&#32452;&#20214;&#27599;&#27425;&#28210;&#26579;&#20043;&#21518;&#65292;&#37117;&#20250;&#35843;&#29992;&#36825;&#20010;&#22238;&#35843;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="E4823B85-2FC6-49D8-A339-FB7D5F1AE851" TEXT="&#36825;&#26679;&#23601;&#36798;&#21040;&#20102; componentDidMount &#21644; componentDidUpdate &#19968;&#26679;&#30340;&#25928;&#26524;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="CE4D1C13-4E0E-4174-98AB-60628EF9B387" TEXT="&#20165;&#38656;&#20851;&#24515; after render" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="B2F72236-AFD1-4B37-8DC2-585CEA3D8BB5" TEXT="&#26412;&#36136;&#19978;&#26159;&#160;componentDidMount&#160;&#21644;&#160;componentDidUpdate&#160;&#34987;&#35843;&#29992;&#65292;&#20294;&#26159;&#20851;&#24515;&#30340;&#19981;&#26159; mount &#25110; update &#36807;&#31243;&#65292;&#32780;&#26159; &#8220;after render&#8221; &#20107;&#20214;&#65292;useEffect &#23601;&#26159;&#21578;&#35785;&#32452;&#20214;&#22312;&#8220;&#28210;&#26579;&#23436;&#8221;&#20043;&#21518;&#20570;&#28857;&#20160;&#20040;&#20107;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="CE1AFE0D-F4FD-44FF-B914-F342A0470125" TEXT="useContext" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="250D6410-3AD6-46B8-AF1F-1F4D6A977082" TEXT="useMemo" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="3C4BE912-196A-4A88-8226-53D0028A307F" TEXT="&#36820;&#22238;&#32531;&#23384;&#20540;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="15996904-1F82-4575-B337-268A3F521FA3" TEXT="useCallback" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>Counter now also receives onClick function as a prop. Could you guess whether our Counter2 component will be rerendered when count1 value change</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const App = () =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const [count1, setCount1] = React.useState(0)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const [count2, setCount2] = React.useState(0)</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const increaseCounter1 = () =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        setCount1(count1 =&gt; count1 + 1)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    }</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const increaseCounter2 = () =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            setCount1(count2 =&gt; count1 + 1)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    }</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    return (</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        &lt;&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            &lt;Counter value={count1} onClick={increaseCounter1}&gt;Counter 1&lt;/Counter&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            &lt;Counter value={count2} onClick={increaseCounter2}&gt;Coutner 2&lt;/Counter&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        &lt;/&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    )</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const Counter = ({value, children, onClick}) =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    console.log(&apos;Render: &apos;, children)</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    return (</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        &lt;Button onClick={}&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            {children}: {value}</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        &lt;/div&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    )</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>export default React.memo(Counter)</p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>The answer is YES </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Apple Color Emoji"; -cocoa-font-postscriptname: "AppleColorEmoji"; '>😮</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>.</span></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>Even when we use React.memo, the counter2 component is still rerendered when only the count1 changes because React.memo uses reference equality to prevent unnecessary renders. However, when App is rerendered, the increaseCounter2 is recreated, therefore, the onClick props passed into the Counter component is different every time which causes the component to be rerendered. The easy way to avoid this issue is to prevent the increaseCounter2 function from being recreated when the App is rerendered.</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>We make use of React.useCallback to do this</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const App = () =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const [count1, setCount1] = React.useState(0)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const [count2, setCount2] = React.useState(0)</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const increaseCounter1 = React.useCallback(() =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        setCount1(count1 =&gt; count1 + 1)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    }, [])</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    const increaseCounter2 = React.useCallback(() =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            setCount2(count2 =&gt; count1 + 1)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    }, [])</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    return (</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        &lt;&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            &lt;Counter value={count1} onClick={increaseCounter1}&gt;Counter 1&lt;/Counter&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            &lt;Counter value={count2} onClick={increaseCounter2}&gt;Coutner 2&lt;/Counter&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        &lt;/&gt;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    )</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>Take a look at the dependencies array, it&apos;s empty because I want to create these functions only once. In this way, the onClick props passed to the Counter component is always the same</p></body>
</html>
</richcontent>
<node ID="4BA8BC82-4FD1-4629-B4CF-FB5C365914C9" TEXT="&#36820;&#22238;&#32531;&#23384;&#20989;&#25968;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#259BBA" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="82B7E1D9-8742-49B0-93AD-9EA7AEDD4792" TEXT="React.memo" COLOR="#36332D" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="6" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="442F87EB-74F9-4DDA-9969-849BC093D083" TEXT="&#31867;&#27604; React.PureComponent" COLOR="#36332D" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="64E51BA2-50A6-45F1-93E3-56252425402F" TEXT="React.memo&#160;will compare all props passed to the component by&#160;referential equality. If these props are unchanged,&#160;React.memo&#160;will reuse the last rendered result, therefore, it prevents the component from being rerendered.&#160;" COLOR="#36332D" POSITION="right" STYLE="fork"><edge COLOR="#EE685E" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
<node ID="11D3936C-06C3-44D3-AE12-81A1A7B3AA88" TEXT="&#36816;&#20316;&#27969;&#31243;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="7A94BC82-6763-4748-ACFB-C6626DF21A73" TEXT="&#21021;&#22987;&#21270;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="8A0C4D4B-6675-447E-AD38-620F56014D5D" TEXT="&#26500;&#24314; dispatcher &#20989;&#25968;&#21644;&#21021;&#22987;&#20540;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="C591E68F-8408-465A-9E45-8121CB7BF8E0" TEXT="ReactCurrentDispatcher.current &#25351;&#21521;&#36127;&#36131;&#21021;&#22987;&#21270;&#30340; Dispatcher" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /><node ID="E2C3FC6D-5363-477A-8C3C-5881534312A4" TEXT="HooksDispatcherOnMount" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="3" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
</node>
<node ID="E1CED798-E428-4A4A-B77C-0F8ACFBA03BE" TEXT="&#26356;&#26032;&#26102;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="EB84CB47-06F6-4C77-85DD-9B5684CFE8DB" TEXT="&#35843;&#29992; dispatcher &#20989;&#25968;&#65292;&#25353;&#24207;&#25554;&#20837; update" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="547B38DD-B6D5-424E-A112-2FFE5B236AE7" TEXT="&#21363; action" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="3" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="E01747DF-F7B0-4252-8092-5459C90A3276" TEXT="&#26222;&#36890;&#20540;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="2" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="7C1A34B6-6E0F-4766-A7F2-69B11C85B73A" TEXT="&#20540;&#26412;&#36523;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="1" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
<node ID="E6EB185C-A3F3-4C9F-9827-05AEB2409718" TEXT="&#20989;&#25968;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="2" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="793B828A-84D1-40DE-B145-A0C8B3616F78" TEXT="action(state)" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="1" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
</node>
</node>
<node ID="89E834F8-55FD-40C3-8A5E-D02743BBA050" TEXT="&#35843;&#24230;&#19968;&#27425; react &#26356;&#26032;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="74F15B39-1FC7-43D3-A099-04B0BB1D6E10" TEXT="scheduleWork" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="3" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="6E450CA3-42F4-4A82-8051-51E4F4D4875D" TEXT="&#22312;&#26356;&#26032;&#30340;&#36807;&#31243;&#20013;&#23558; ReactCurrentDispatcher.current &#25351;&#21521;&#36127;&#36131;&#26356;&#26032;&#30340; Dispatcher" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="21B4A69C-DA39-465C-B6EB-D9596E6B8517" TEXT="HooksDispatcherOnUpdate" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="3" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="BF2C4F47-F042-4A97-84EB-8D03F5A68B98" TEXT="&#25191;&#34892;&#21040;&#20989;&#25968;&#32452;&#20214; App() &#26102;&#65292;useState&#20250;&#34987;&#37325;&#26032;&#25191;&#34892;&#65292;&#22312; resolveDispatcher &#30340;&#38454;&#27573;&#25343;&#21040;&#20102;&#36127;&#36131;&#26356;&#26032;&#30340; dispatcher" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="70A943D5-5C31-4F60-9562-29BEECEDD59C" TEXT="dispatcher = resolveDispatcher()" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="3" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="8ED0C761-D800-4900-9742-F2E0D52EA2B6" TEXT="useState &#33719;&#21462; Hook &#23545;&#35937;&#65292;Hook.queue &#20013;&#23384;&#20648;&#20102;&#26356;&#26032;&#38431;&#21015;&#65292;&#20381;&#27425;&#36827;&#34892;&#26356;&#26032;&#21518;&#65292;&#21363;&#21487;&#25343;&#21040;&#26368;&#26032;&#30340;state" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="2B03E30A-1BD7-42D7-B408-0EB5284C443F" TEXT="&#20989;&#25968;&#32452;&#20214; App() &#25191;&#34892;&#21518;&#36820;&#22238;&#30340; nextChild &#20013;&#30340; state &#20540;&#24050;&#32463;&#26159;&#26368;&#26032;&#30340;&#20102;&#12290;FiberNode &#20013;&#30340;memorizedState &#20063;&#34987;&#35774;&#32622;&#20026;&#26368;&#26032;&#30340;state" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="5D6387AB-DBC5-426F-A529-02FEA7A92628" TEXT="Fiber &#28210;&#26579;&#20986;&#30495;&#23454; DOM" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="264737E3-CD6E-4127-890C-1A9A08D7B7D2" TEXT="&#26356;&#26032;&#32467;&#26463;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="4" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
</node>
</map>
