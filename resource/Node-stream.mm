<map version="1.0.0"><node ID="8BFC0D86-7FCF-493A-856E-7A3170F1F01C" BACKGROUND_COLOR="#FFFFFF" TEXT="Node stream" COLOR="#164355" POSITION="right" STYLE="bubble"><edge COLOR="#FFFFFF" WIDTH="2" /><font NAME="HelveticaNeue-Light" SIZE="24" /><node ID="17A96D7C-8BA0-4B38-A843-10145B07B354" TEXT="&#30446;&#30340;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="C4A0430C-D011-4526-BA6C-D61B06432384" TEXT="&#22312;&#26377;&#38480;&#30340;&#20869;&#23384;&#20013;&#25805;&#20316;&#22823;&#37327;&#25968;&#25454;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="7237F851-7FA3-4D4D-A029-E1DD2257B10B" TEXT="&#31034;&#20363;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>有个用户</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Web </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>在线看视频的场景，假定我们通过</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> HTTP </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>请求返回给用户电影内容，那么代码可能写成这样</span></p><p></p><p></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const http = require(&apos;http&apos;);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const fs = require(&apos;fs&apos;);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>http.createServer((req, res) =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  fs.readFile(moviePath, (err, data) =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>     res.end(data);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  });</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}).listen(8080);</p><p></p><p></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>这样的代码又两个明显的问题</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>电影文件需要读完之后才能返回给客户，等待时间超长</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>电影文件需要一次放入内存中，内存吃不消</p><p></p><p></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>使用</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> stream </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>可以把电影文件一点点的放入内存中，然后一点点的返回给客户（利用了</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> HTTP </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>协议的</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Transfer-Encoding: chunked </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>分段传输特性），用户体验得到优化，同时对内存的开销明显下降</span></p><p></p><p></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const http = require(&apos;http&apos;);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const fs = require(&apos;fs&apos;);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>http.createServer((req, res) =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  fs.createReadStream(moviePath).pipe(res);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}).listen(8080);</p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>除了上述好处，</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>stream </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>还让代码优雅了很多，功能逻辑独立，拓展也比较简单。比如需要对视频内容压缩，我们可以引入一个专门做此事的流，这个流不用关心其它部分做了什么，只要是接入管道中就可以了</span></p><p></p><p></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const http = require(&apos;http&apos;);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const fs = require(&apos;fs&apos;);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const oppressor = require(oppressor);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>http.createServer((req, res) =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>  fs.createReadStream(moviePath)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>     .pipe(oppressor)</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>     .pipe(res);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}).listen(8080);</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>可以看出来使用流后代码逻辑变得相对独立，可维护性也会有一定的改善</p></body>
</html>
</richcontent>
</node>
</node>
<node ID="86A6AE4C-BDD9-45C4-A9E5-E44C62E73C54" TEXT="&#20998;&#31867;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="9CEB48A1-841C-45FE-ABFE-CB04436FEFA2" TEXT="readable" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="97C61A93-F01D-44F6-A38E-980C302FD3BC" TEXT="&#21487;&#35835;&#21462;&#25968;&#25454;&#30340;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="9A4804CB-8CE2-4018-9F7B-5FEF67546CA2" TEXT="fs.createReadStream" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
</node>
<node ID="75809237-F2C8-477D-88E2-D7F24919A0B8" TEXT="writable" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="CB9B14E4-9105-46EC-B5A6-853E3DC2B743" TEXT="&#21487;&#20889;&#20837;&#25968;&#25454;&#30340;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="A5A7E010-345E-4B20-8CFB-713857318FC5" TEXT="fs.createWriteStream" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
</node>
<node ID="A4D3B4E3-6DD5-4A25-AD93-B5E5F02CB67B" TEXT="duplex" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="B8E88887-2EF1-4A65-B2BE-FF57C3B126D8" TEXT="&#21487;&#20197;&#35835;&#20889;&#25968;&#25454;&#30340;&#21452;&#24037;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="228016DE-BA0C-4E16-81A0-13202E205C7A" TEXT="net.Socket" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
</node>
<node ID="8303CBD3-C894-4BC6-B73D-F1AEBFABC6AC" TEXT="transform" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="51C56445-5649-445B-B860-5B9A324D13D5" TEXT="&#19982; duplex &#30340;&#21306;&#21035;&#22312;&#20110;&#21487;&#23545;&#25968;&#25454;&#36827;&#34892;&#21152;&#24037;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="D1B71456-EAB7-47A2-B6A9-9A36704E0FC6" TEXT="zlib streams" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="7A9A1862-A77B-404D-80F4-644FC4EBD20D" TEXT="crypto streams" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
</node>
</node>
<node ID="100C7696-8089-460B-8451-C3420F231B6A" TEXT="&#27010;&#24565;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="848AACBD-1E51-4048-971F-ABFAAF0D75CD" TEXT="Object Mode" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="A718B450-780D-4AF8-A343-4326E0DA7C8D" TEXT="&#20351;&#27969;&#25805;&#20316;&#23545;&#35937;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
<node ID="815DFB28-7E78-40BE-8C9E-9C74EB8A607B" TEXT="Buffer" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="43DE0854-E563-4DD3-99FB-6BAB8F394125" TEXT="&#12302;&#27969;&#12303;&#40664;&#35748;&#25805;&#20316; string &#21644; Buffer" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="EEFF4F08-35FC-4E94-B728-C17E56FED5E3" TEXT="&#20869;&#37096;&#32531;&#23384;&#21306;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="30E76F26-60BF-484D-926B-8A6AEB35C781" TEXT="writable._writableState.getBuffer()" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="93469D7E-A90C-4D3A-A02C-60775FC887B3" TEXT="readable._readableState.buffer" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
</node>
<node ID="551E9429-86B1-4D82-BA13-AFB4179D2815" TEXT="highWaterMark" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="CC0324E6-17E2-4467-8565-CF3CA48DED4F" TEXT="&#40664;&#35748; 16484" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="6905DD55-2849-47D2-A17A-799E3F32183F" TEXT="16KB" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
<node ID="EFE38C46-4784-4A50-B8F7-AEB5CEFAE260" TEXT="&#26368;&#22823;&#21487;&#35774;&#20026; 8MB" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="D4655CD3-5F14-4A35-B483-D63D18018AAF" TEXT="&#19981;&#21516;&#21333;&#20301;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="0DE5E7C8-83E9-49DC-8B9F-12B59F862A08" TEXT="&#23383;&#33410;&#25968;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="FEC30703-3390-4506-9700-D5D6CB362C7A" TEXT="objects &#24635;&#25968;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
<node ID="046113ED-D2A1-4D13-9338-17963681CB45" TEXT="&#21487;&#35835;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="7EB9FDCF-1357-48E1-B2F5-B147BCB49AF9" TEXT="&#21487;&#35835;&#32531;&#23384;&#36229;&#36807; highWaterMark" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="711C1B21-15C3-4257-A5A4-1C8E9C2C9263" TEXT="&#20572;&#27490;&#35843;&#29992; readable_read()" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="2" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="697367D7-0E7C-4EF2-B8D5-4CDCDDC12000" TEXT="&#21487;&#20889;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="7A4FCFB5-1DF0-4737-8EB7-3440DB97F916" TEXT="&#21487;&#20889;&#32531;&#23384;&#36229;&#36807; highWaterMark" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="D2596271-1821-4A5E-9073-22012770F401" TEXT="writable.wirte(chunk)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="2" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="CD12474F-03A1-4719-A689-37DDEFD85FF4" TEXT="&#36820;&#22238; false" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="1" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
</node>
</node>
</node>
<node ID="11ABF0FD-8156-4589-B787-3559307424DF" TEXT="&#21487;&#35835;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="B017E443-A205-4CCA-B322-B55CA0FE61BD" TEXT=" &#27169;&#24335;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="D489F7C3-6F07-47F5-AB08-59EDD1900552" TEXT="paused" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>首先我们来看一个</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>pause</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>模式的简单</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>demo:</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>const { Readable } = require(&apos;stream&apos;)</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>class MyReadable extends Readable {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  constructor(options) {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    // Calls the stream.Readable(options) constructor</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    super(options);</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  _read(size) {</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>}</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>const rs = new MyReadable()</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>// const rs = new MyReadable({ objectMode: true })</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>rs.on(&apos;readable&apos;, () =&gt; {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  let chunk;</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  while (null !== (chunk = rs.read(5))) {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    console.log(&apos;Received bytes of data.&apos;, chunk);</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>})</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>rs.push(&apos;1234567&apos;)</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>rs.push(&apos;890abcd&apos;)</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>rs.push(&apos;efghijk&apos;)</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>console.log(rs._readableState.buffer)</p></body>
</html>
</richcontent>
<node ID="C325CDD8-A760-4038-8861-96B7A80B456A" TEXT="&#25163;&#21160;&#35843;&#29992; stream.read() &#20174;&#27969;&#20013;&#35835;&#21462;&#25968;&#25454;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="E1596B78-82B0-4D1B-93A3-7E86DC547D2E" TEXT="&#20999;&#25442;&#21040;&#24403;&#21069;&#27169;&#24335;&#30340;&#26041;&#27861;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="354CBB64-5A19-4251-A5B3-D9B77B4EC2E7" TEXT="stream.pause()" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="2" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="423DDBA1-CFF9-4854-A74E-EC1338A4212A" TEXT="&#22914;&#26524;&#26377; pipe &#21024;&#38500;&#25152;&#26377; data &#20107;&#20214;&#22788;&#29702;&#21644; pipe&#65292;&#20877;&#35843;&#29992; stream.pause()" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="2" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="4F62CA7F-666B-447B-A4BF-96A068AD2561" TEXT="flowing" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>根据上面的阐述,</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>flowing</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>模式是自动化的,你可以使用监听</span><span style='color: rgba(251, 55, 34, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>data</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>方法来触发,也可以调用</span><span style='color: rgba(251, 55, 34, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>pipe</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>方法或者</span><span style='color: rgba(251, 55, 34, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>resume</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>方法</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>.</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>我们看一下下面的</span><span style='color: rgba(38, 38, 38, 1.000000); font: 15px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>demo:</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>const { Readable } = require(&apos;stream&apos;)</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>class MyReadable extends Readable {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  constructor(options) {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    // Calls the stream.Readable(options) constructor</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    super(options);</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  _read(size) {</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>}</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>const rs = new MyReadable()</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>// const rs = new MyReadable({ objectMode: true })</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>rs.on(&apos;data&apos;, (data) =&gt; {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  console.log(&apos;Received data: &apos;, data)</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>})</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>rs.push(&apos;1234567&apos;)</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>setTimeout(() =&gt; {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  rs.push(&apos;890abcd&apos;)</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>}, 1000)</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>setTimeout(() =&gt; {</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  rs.push(&apos;efghijk&apos;)</p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>}, 2000)</p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 12px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>console.log(rs._readableState.buffer)</p></body>
</html>
</richcontent>
<node ID="8FF3C36E-1150-4CC2-A068-8A5A1A1E2AC8" TEXT="&#20999;&#25442;&#21040;&#24403;&#21069;&#27169;&#24335;&#30340;&#26041;&#27861;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="DF5096C6-B65C-4543-97CB-A0D22E49868D" TEXT="&#28155;&#21152; data &#20107;&#20214;&#22788;&#29702;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="2" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="9A6DD06E-0171-4718-9C42-CDF099FBF6A0" TEXT="&#35843;&#29992; stream.resume()" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="2" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="43D3EC22-C781-4455-B5C1-A0A9864337BC" TEXT="&#35843;&#29992;  stream.pipe() &#21457;&#36865;&#25968;&#25454;&#21040;&#19968;&#20010;&#21487;&#20889;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="2" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
</node>
<node ID="9E7A85A2-6FF9-4A23-A7D7-49EC947FDDB5" TEXT="&#20107;&#20214;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="D7C66527-8A5D-4454-992C-64A280B091CC" TEXT="readable" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="F5559C76-1C51-4E17-B9E6-98DE7DDA0C74" TEXT="&#24403;&#27969;&#20013;&#26377;&#25968;&#25454;&#21487;&#35835;&#30340;&#26102;&#20505;&#35302;&#21457;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
<node ID="955BE502-54E6-420F-8DBA-DE82BD0A8527" TEXT="data" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="721229B7-4EE7-45CA-8E71-46E9BFD66575" TEXT="&#24403;&#27969;&#38656;&#35201;&#20256;&#36755;&#25968;&#25454;&#32473;&#28040;&#36153;&#32773;&#30340;&#26102;&#20505;&#20250;&#35302;&#21457;&#35813;&#20107;&#20214;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
<node ID="00E15CCA-1C9F-488D-B61C-ABF7EB1E6296" TEXT="end" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="19765A98-7EB0-48F6-8DE3-73C374D90DF6" TEXT="&#24403;&#21487;&#35835;&#27969;&#20013;&#27809;&#26377;&#20219;&#20309;&#25968;&#25454;&#21487;&#20197;&#28040;&#36153;&#30340;&#26102;&#20505;&#23601;&#22238;&#35302;&#21457;&#36825;&#20010;&#20107;&#20214;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="3042D1B4-C748-44AC-AE24-099F667FA3B9" TEXT="&#26041;&#27861;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="A895975E-4D88-47CA-B89D-B3A9D9FEA2AA" TEXT="read([size])" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="DF1E9BC6-A07F-4EE8-ACF6-BE5F9521573A" TEXT="&#20174;&#20869;&#37096;&#32531;&#23384;&#20013;&#35835;&#21462;&#25968;&#25454;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="0C2A20B7-24A6-468A-91E0-E1964FE55AEE" TEXT="paused &#27169;&#24335;&#19979;&#38656;&#35201;&#35843;&#29992;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="0BBA42F2-FD89-48EA-8A04-90FBADDD2693" TEXT="flowing &#27169;&#24335;&#19979;&#33258;&#21160;&#35843;&#29992;&#30452;&#21040;&#32531;&#23384;&#28040;&#32791;&#23436;&#27605;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
<node ID="C8B17051-2799-4984-AE30-AC1F92F36D40" TEXT="pipe" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="AFA92FAF-C164-47C0-8BC0-FEDE052D291D" TEXT="&#38468;&#21152;&#19968;&#20010; writable &#27969;&#21040;&#21487;&#20889;&#27969;&#20013;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="204DB49A-8420-459D-90D9-61AA57D95C5C" TEXT="&#21487;&#35835;&#27969;&#33258;&#21160;&#20999;&#25442;&#21040; flowing &#27169;&#24335;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="9483D8A6-76D7-4481-BE0A-D824720C8D4F" TEXT="push &#23427;&#30340;&#25152;&#26377;&#25968;&#25454;&#21040;&#36830;&#25509;&#30340;&#21487;&#20889;&#27969;&#20013;&#21435;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
<node ID="9489B5B8-6BDB-4682-9B5C-C1717B6EC6B5" TEXT="unpipe" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="D6A2470D-7D11-40C4-B173-25EA6AEC01E8" TEXT="resume" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="DDD8F05A-2B6D-486B-8A27-B0B2D734FDF7" TEXT="&#23548;&#33268;&#19968;&#20010;&#26126;&#30830;&#20572;&#27490;&#30340;&#21487;&#35835;&#27969;&#24320;&#22987;&#24674;&#22797;&#21457;&#36865;data&#20107;&#20214;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="1E8E2DC0-8936-4EC7-AE5F-814F5060864F" TEXT="&#20999;&#25442;&#20026;flowing&#27169;&#24335;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
<node ID="8C57E84B-0843-4BEE-904E-4D626A36A013" TEXT="setEncoding" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="0FA38A65-F263-4B47-AFDE-3D6207C01855" TEXT="destroy" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="95431F62-D3E0-4A9D-9FA3-830A79D7F33A" TEXT="&#35813;&#26041;&#27861;&#29992;&#20110;&#38144;&#27585;&#21487;&#35835;&#27969;&#65292;&#28982;&#21518;&#35302;&#21457;error&#20107;&#20214;&#12290;&#20999;&#35760;&#19981;&#35201;&#37325;&#20889;&#35813;&#26041;&#27861;&#65292;&#32780;&#26159;&#24212;&#35813;&#23454;&#29616;readable._destroy" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="24EF1C3F-B91D-4F91-983D-695112DE02DF" TEXT="&#23454;&#29616;&#19968;&#20010;&#21487;&#35835;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>举个例子：实现一个每</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> 100 </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>毫秒生产一个随机数的流（没什么用处）</span></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const Readable = require(&apos;stream&apos;).Readable;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>class RandomNumberStream extends Readable {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    constructor(max) {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        super()</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    }</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    _read() {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        const ctx = this;</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        setTimeout(() =&gt; {</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            const randomNumber = parseInt(Math.random() * 10000);</p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            // </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>只能</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> push </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>字符串或</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Buffer</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>，为了方便显示打一个回车</span></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>            ctx.push(`${randomNumber}\n`);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>        }, 100);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>    }</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>}</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>module.exports = RandomNumberStream;</p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>类继承部分代码很简单，主要看一下</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> _read </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>方法的实现，有几个值得注意的地方</span></p><p></p><p></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>Readable </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>类中默认有</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> _read </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>方法的实现，不过什么都没有做，我们做的是覆盖重写</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>_read </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>方法有一个参数</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> size</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>，用来向</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> read </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>方法指定应该读取多少数据返回，不过只是一个参考数据，很多实现忽略此参数，我们这里也忽略了，后面会详细提到</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>通过</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> this.push </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>向缓冲区推送数据，缓冲区概念后面会提到，暂时理解为挤到了水管中可消费了</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>push </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的内容只能是字符串或者</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Buffer</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>，不能是数字</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>push </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>方法有第二个参数</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> encoding</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>，用于第一个参数是字符串时指定</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> encoding</span></p><p></p><p></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>执行一下看看效果</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const RandomNumberStream = require(&apos;./RandomNumberStream&apos;);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>const rns = new RandomNumberStream();</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>rns.pipe(process.stdout);</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>这样可以看到数字源源不断的显示到了控制台上，实现了一个产生随机数的可读流。</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>1. 如何停下来？向缓冲区 push 一个 null 就可以。</p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>2. 细心的同学可能注意到，每隔 100 毫秒生产一个随机数并不是调用的 setInterval，而是使用的 setTimeout，为什么仅仅是延时了一下并没有重复生产，结果却是正确的呢？</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>这就需要了解流的两种工作方式</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>流动模式：数据由底层系统读出，并尽可能快地提供给应用程序</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>暂停模式：必须显示地调用 read() 方法来读取若干数据块</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>流在默认状态下是处于暂停模式的，也就是需要程序显式的调用 read() 方法，可上面例子中并没有调用就可以得到数据，因为流通过 pipe() 方法切换成了流动模式，这样 _read() 方法会自动被反复调用，直到数据读取完毕，所以每次 _read() 方法里面只需要读取一次数据即可</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>3. 流从默认的暂停模式切换到流动模式可以使用以下几种方式：</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>通过添加 data 事件监听器来启动数据监听</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>调用 resume() 方法启动数据流</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>调用 pipe() 方法将数据转接到另一个可写流</p><p></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>从流动模式切换为暂停模式又两种方法：</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>在流没有 pipe() 时，调用 pause() 方法可以将流暂停</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>pipe() 时移除所有 data 事件的监听，再调用 unpipe() 方法</p></body>
</html>
</richcontent>
<node ID="4165B086-C2AC-4DA1-B6F7-B6D381FDAEFB" TEXT="&#32487;&#25215; sream &#27169;&#22359;&#30340; Readable &#31867;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="3BE7896B-78A3-4727-9FAF-27D08AF68087" TEXT="&#37325;&#20889; _read &#26041;&#27861;&#65292;&#35843;&#29992; this.push &#23558;&#29983;&#20135;&#30340;&#25968;&#25454;&#25918;&#20837;&#24453;&#35835;&#21462;&#38431;&#21015;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#DC2128" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="02C8B536-A3F8-4ED5-BC06-E2BC6494596F" TEXT="&#21487;&#20889;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="70603D18-1E8D-4760-BB1F-3C587286B22A" TEXT="&#20107;&#20214;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="EC627993-7867-4898-A23E-8EA0F8F8B795" TEXT="drain" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="76A62E9B-6041-419E-A86F-CF27D397DB75" TEXT="&#24403;&#20320;&#35843;&#29992; stream.write &#26041;&#27861;&#30340;&#26102;&#20505;&#36820;&#22238; false, &#36825;&#20010;&#26102;&#20505;&#34920;&#26126;&#20889;&#20837;&#30340;&#25968;&#25454;&#36229;&#36807;&#21487;&#20889;&#27969;&#30340;&#38400;&#20540;. &#28982;&#21518;&#31561;&#24453;&#21487;&#20889;&#27969;&#21448;&#33021;&#24674;&#22797;&#20889;&#20837;&#25968;&#25454;&#30340;&#26102;&#20505;, &#35813;&#20107;&#20214;&#23558;&#20250;&#34987;&#20986;&#21457;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
<node ID="8EFD420F-B09A-412A-AA04-7974DCE76DEB" TEXT="pipe/unpipe" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="5C9DA514-CFCB-40D6-883D-1FD2D950D2AE" TEXT="&#24403;&#26377;&#21487;&#35835;&#27969;&#23558;&#27492;&#21487;&#20889;&#27969;&#20316;&#20026;&#36755;&#20986;&#30340;&#26102;&#20505;&#20250;&#35302;&#21457;&#27492;&#20107;&#20214;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
<node ID="49504E93-9DC1-4914-B403-02B7C77F121C" TEXT="finish" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="0EDA428D-277F-414C-9107-34F1C693E98A" TEXT="&#31867;&#27604;&#21487;&#35835;&#27969;&#30340; end" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="63D992D4-82D4-4720-A764-EBDBCDC0F048" TEXT="&#26041;&#27861;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="9DF09B67-5D2D-4212-B37B-9ABEC9084655" TEXT="cork/uncork" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(38, 38, 38, 1.000000); font: 16px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>这种情况是为了避免我们频繁地写小块的数据到可写流中造成性能的下降,所以我们可以批量写完一批数据后再调用</span><span style='color: rgba(184, 14, 61, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>uncork</span><span style='color: rgba(38, 38, 38, 1.000000); font: 16px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>事件来flush数据.在官方文档中建议</span><span style='color: rgba(184, 14, 61, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>uncork</span><span style='color: rgba(38, 38, 38, 1.000000); font: 16px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>放在</span><span style='color: rgba(184, 14, 61, 1.000000); font: 14px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>process.nextTick()</span><span style='color: rgba(38, 38, 38, 1.000000); font: 16px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>中延迟调用.</span></p></body>
</html>
</richcontent>
<node ID="972A7B26-9BDE-4971-A241-EE567A238C0B" TEXT="cork/uncork&#26159;&#32452;&#21512;&#20351;&#29992;&#30340;,&#21069;&#32773;&#21487;&#20197;&#30452;&#25509;&#24378;&#21046;&#25968;&#25454;&#28382;&#30041;&#21040;&#32531;&#23384;&#20013;,&#28982;&#21518;&#24403;&#25105;&#20204;&#20877;&#35843;&#29992;uncork&#25110;&#32773;end&#30340;&#26102;&#20505;&#20877;&#20889;&#21040;&#20855;&#20307;&#30340;&#24213;&#23618;&#36164;&#28304;." COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
<node ID="8BFFFCBA-3CE2-4E7A-8B30-D444A2EC08C4" TEXT="write" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="64E4D8C6-AD51-400D-840D-989B6E5D0305" TEXT="&#22914;&#26524;&#20026;true&#30340;&#35805;&#37027;&#23601;&#26159;&#20869;&#37096;&#32531;&#23384;&#31354;&#38388;&#19981;&#22815;,&#27492;&#26102;&#20889;&#20837;&#25968;&#25454;&#23601;&#24212;&#35813;&#26242;&#20572;&#30452;&#21040;&#25509;&#25910;&#21040;drain&#20107;&#20214;&#12290;" COLOR="#262626" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="2760BEED-1401-4C7E-897B-90BEF97FB2F7" TEXT="&#20294;&#26159;&#24182;&#19981;&#34920;&#31034;&#27492;&#26102;&#20320;&#20877;&#24448;&#21487;&#20889;&#27969;&#20889;&#25968;&#25454;&#20250;&#20002;&#25968;&#25454;,Nodejs&#20173;&#28982;&#20250;&#32531;&#23384;&#25152;&#26377;&#20889;&#20837;&#30340;chunks&#30452;&#21040;&#20351;&#29992;&#23436;&#25152;&#26377;&#30340;&#32531;&#23384;&#12290;" COLOR="#262626" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="2FA942BC-55F3-4CE8-9537-86D640AAE50C" TEXT="&#21487;&#23454;&#29616;&#30340;&#26041;&#27861;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>When you invoke cb(), it tells writer that you&apos;ve successfully processed the data and ready to process next chunk. Then writer will send you more data in _write method if there is any data.</p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>If you don&apos;t call cb() but there is more data available, writer will put all incoming data in internal buffer and wait for you to call cb().</p></body>
</html>
</richcontent>
<node ID="40D08CCB-BA61-432A-8C6D-977E067C1218" TEXT="_write(chunk, encoding, callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="A29A437F-9DCC-445B-9A20-2A2767ECA505" TEXT="_writev(chunks, callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /></node>
<node ID="8361AB89-2589-4640-9454-893082564B29" TEXT="_final(callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#FCB60D" WIDTH="4" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
</node>
<node ID="53A59D7A-2387-4484-A1FB-1A8C0E1584F3" TEXT="&#21452;&#24037;&#27969;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="E1935A4E-6EFF-433A-8E17-126EACE7A788" TEXT="Duplex" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="FE41095C-8C9C-4537-B258-79DF6B45EA2D" TEXT="&#21487;&#35835;&#27969;&#21644;&#21487;&#20889;&#27969;&#26159;&#23436;&#20840;&#29420;&#31435;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="31CD051B-6D8A-4E73-843A-DEB38A5B3D56" TEXT="&#21487;&#23454;&#29616;&#30340;&#26041;&#27861;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="8289FDE4-5CB7-4B26-9A02-4AF91AB6F0F5" TEXT="_read(size)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="C6A7E62A-354A-4DF6-A5C1-B563778882DB" TEXT="_write(chunk, encoding, callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="61379765-23E6-455C-965F-25BE05CACA49" TEXT="_writev(chunks, callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="31F96D84-6ABF-4631-89E9-3654975DAF39" TEXT="_final(callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="CB6F9007-0DE1-4B7E-9DA6-E019F459F971" TEXT="Transform" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="5" /><font NAME="PingFangSC-Regular" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(38, 38, 38, 1.000000); font: 16px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>综合上面的介绍，我们有这么一个demo，用来转换所有输入的字符变为大写的：</p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> { Transform } = </span><span style='color: rgba(14, 114, 163, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>require</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>(</span><span style='color: rgba(209, 0, 52, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>&apos;stream&apos;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>)</span></p><p></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>class</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> myTransform extends Transform {</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  </span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>constructor(options) </span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>{</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>super</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>(options);</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  _transform(chunk, encoding, done) {</p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> upperChunk = chunk.toString().toUpperCase()</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>this</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>.push(upperChunk)</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    done()</p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  _flush(cb){</p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(135, 135, 117, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>/* at the end, output the our additional info */</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    </span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>this</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>.push(</span><span style='color: rgba(209, 0, 52, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>&apos;this is flush data\n&apos;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>)</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>    cb(</span><span style='color: rgba(14, 110, 108, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>null</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>, </span><span style='color: rgba(209, 0, 52, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>&apos;appending more data\n&apos;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>)</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>  }</p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>}</p><p></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>const</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> tss = </span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>new</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '> myTransform()</span></p><p></p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>tss.pipe(process.stdout)</p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>tss.write(</span><span style='color: rgba(209, 0, 52, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>&apos;hello transform stream\n&apos;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>)</span></p><p><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>tss.write(</span><span style='color: rgba(209, 0, 52, 1.000000); font: 13px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>&apos;another line\n&apos;</span><span style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>)</span></p><p style='color: rgba(38, 38, 38, 1.000000); font: 13px "Menlo"; -cocoa-font-postscriptname: "Menlo-Regular"; '>tss.end()</p></body>
</html>
</richcontent>
<node ID="C859EFF1-4BE6-4066-8705-7CF0AD4DF643" TEXT="&#21487;&#20197;&#23545;&#27969;&#25968;&#25454;&#36827;&#34892;&#8220;&#21464;&#24418;&#8221;&#65292;&#20063;&#23601;&#26159;&#35828;&#36755;&#20986;&#30340;&#25968;&#25454;&#19982;&#36755;&#20837;&#30340;&#25968;&#25454;&#26159;&#26377;&#19968;&#20010;&#26144;&#23556;&#20851;&#31995;&#65292;&#26159;&#23558;&#36755;&#20837;&#25968;&#25454;&#36827;&#34892;&#19968;&#23450;&#22320;&#21152;&#24037;&#20877;&#36755;&#20986;&#21435;&#30340;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="66D444FF-584C-4553-B3F4-C5BF4EC13862" TEXT="&#21487;&#23454;&#29616;&#30340;&#26041;&#27861;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="4A6E736C-0160-46F6-9058-821650E968AB" TEXT="_read(size)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="BC0D39D3-8325-43A1-89DB-A9EBC22B8B13" TEXT="_write(chunk, encoding, callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="3D39D9AC-87B1-415F-BD34-D1737339021F" TEXT="_writev(chunks, callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="32DBE1A3-C052-4E5A-A742-C07AB6ED4C53" TEXT="_final(callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="47DB6665-E40E-4118-B677-3BD3FB502863" TEXT="_transform(chunk, encoding, callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="2E6108B6-20FD-4CE7-94F2-38E3F229E839" TEXT="_flush(callback)" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="D859EC84-86D7-47BC-9A1C-41BB72904144" TEXT="&#22312;&#24403;&#21069;&#27809;&#26377;&#34987;&#20889;&#25968;&#25454;&#38656;&#35201;&#28040;&#36153;&#30340;&#26102;&#20505;&#34987;&#35843;&#29992;&#65292;&#20294;&#26159;&#24212;&#35813;&#22312;end&#20107;&#20214;&#35302;&#21457;&#21578;&#30693;&#32467;&#26463;&#21487;&#35835;&#27969;&#20043;&#21069;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="2" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
</node>
</node>
</node>
</map>
