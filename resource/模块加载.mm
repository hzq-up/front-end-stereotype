<map version="1.0.0"><node ID="17E8DEDB-AFA1-408D-9248-8C8B6498AD39" BACKGROUND_COLOR="#FFFFFF" TEXT="&#27169;&#22359;&#21152;&#36733;" COLOR="#164355" POSITION="right" STYLE="bubble"><edge COLOR="#FFFFFF" WIDTH="2" /><font NAME="PingFangSC-Light" SIZE="24" /><node ID="94FF76DA-721E-46ED-96E0-7875EEDCCDFD" TEXT="&#27983;&#35272;&#22120;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="31BF4CC1-4560-4750-BB9C-89710FD338CE" TEXT="AMD" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="9A884E32-D627-4317-B47A-43CB6E97E351" TEXT="&#20195;&#34920;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="A5FCB833-95E5-425E-9F88-48E53FA074C2" TEXT="require.js" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
<node ID="D0D05ABB-01E8-4473-BC5C-F93E097875F7" TEXT="&#29305;&#28857;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="98771A76-799C-4736-ACFD-23EEDE5A36E2" TEXT="&#20381;&#36182;&#21069;&#32622;&#22768;&#26126;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="9220051A-B382-47B0-9D29-CB175B846BB8" TEXT="&#20381;&#36182;&#30340;&#27169;&#22359;&#25552;&#21069;&#25191;&#34892;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="40C7D1A0-F806-40D8-8BC3-4B540F4115A1" TEXT="CMD" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="785AA727-1752-45B7-B5A9-FAB6F2319371" TEXT="&#20195;&#34920;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="EBC466E1-3F0A-459D-9230-920636A15C14" TEXT="sea.js" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="3" /><font NAME="HelveticaNeue" SIZE="18" /></node>
</node>
<node ID="57E9607A-4F07-44A8-ACF3-7E647FE39EE5" TEXT="&#29305;&#28857;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="8EDC9CB8-5412-48FC-91F4-1E59BB94FAEA" TEXT="&#20381;&#36182;&#23601;&#36817;&#22768;&#26126;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="94183176-1FE5-4FCE-9906-D4E133BE2FE0" TEXT="&#20381;&#36182;&#30340;&#27169;&#22359;&#24310;&#36831;&#25191;&#34892;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="D931B0D3-9A0B-42F3-AB7B-D027E12173B6" TEXT="ES6" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="2A4774A8-71BB-4CCB-9563-9E95D4A291AC" TEXT="&#31867;&#20284; AMD" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#1286DE" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="57932953-DE21-47BE-8270-8319EEFDE551" TEXT="&#26381;&#21153;&#31471;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="6" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="8F8C2E58-F49D-477C-8CC3-9DFFC83A21F2" TEXT="CommonJS" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="D7EE3D8C-AB08-4D84-B900-B39A2343BE88" TEXT="&#31867;&#20284; CMD" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#25BAD1" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
<node ID="48D076F1-8A84-4331-B3EB-237D968A261E" TEXT="ES6 &#19982; CommonJS &#23545;&#27604;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="6" /><font NAME="HelveticaNeue" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>ES6 </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>模块的运行机制与</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> CommonJS </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>不一样。</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>JS </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>引擎对脚本静态分析的时候，遇到模块加载命令</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> import</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>ES6 </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>的</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> import </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>有点像</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '> Unix </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>系统的“符号连接”，原始值变了，</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>import </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>加载的值也会跟着变。因此，</span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Helvetica"; -cocoa-font-postscriptname: "Helvetica"; '>ES6 </span><span style='color: rgba(87, 95, 105, 1.000000); font: 14px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</span></p></body>
</html>
</richcontent>
<node ID="6A6313F8-F042-4B0D-8449-8106259BA7E4" TEXT="CommonJS" COLOR="#334752" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="1DECFE0E-2AA3-4B84-8254-1BC00FC79B91" TEXT="&#36755;&#20986;&#20540;&#30340;&#25335;&#36125;" COLOR="#334752" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /><node ID="28B3DF04-C82E-4209-9AA3-D4DC6E7488CA" TEXT="&#36755;&#20986;&#27973;&#25335;&#36125;" COLOR="#334752" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="3" /><font NAME="PingFangSC-Regular" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p><span style='color: rgba(0, 0, 0, 1.000000); font: bold 10px "Times"; -cocoa-font-postscriptname: "Times-Bold"; '>commonJs </span><span style='color: rgba(0, 0, 0, 1.000000); font: bold 10px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Bold"; '>输出的浅拷贝验证</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>/*************** a.js**********************/</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>const foo = {</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>	count: 0</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>}</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>//module.exports</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>foo</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>属性为</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '> foo </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>对象的浅拷贝，指向同一个内存中</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>exports.foo=foo;</p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>window.setTimeout(()=&gt;{</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>	foo.count += 1</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>	console.log(&apos;changed foo&apos;)</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>},1000)</p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>/*************** b.js**********************/</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>const  { foo }  = require(&apos;./a.js&apos;)</p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>console.log(&apos;foo&apos;, foo);//&apos;foo&apos;,{count: 0}</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>window.setTimeout(()=&gt;{</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>  console.log(&apos;after 2s foo&apos;, foo);//&apos;after 2s foo &apos;,{count: 1}</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>}, 2000)</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>复制代码</p><p></p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>作者：骡子</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>链接：</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>https://juejin.im/post/5ae04fba6fb9a07acb3c8ac5</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>来源：掘金</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: bold 10px "Times"; -cocoa-font-postscriptname: "Times-Bold"; '>commonJs </span><span style='color: rgba(0, 0, 0, 1.000000); font: bold 10px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Bold"; '>输出时的危险操作</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>其实上个栗子中的</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>const { foo } = require(&apos;./a.js&apos;)</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>或者</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>const foo = require(&apos;./a.js&apos;).foo</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>写法是相当危险的。因为</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>commonJs</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>输出的值的拷贝，若后面在</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>a.js</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>中</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>对</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>foo</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>的内存指向作出改动，则不能及时更新。</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>我们将上面的栗子做个小改动：</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>/*************** a.js**********************/</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>const foo = {</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>	count: 0</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>}</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>exports.foo=foo; //</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>此时</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>foo</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>指向</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '> {count: 0}</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的内存地址</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>window.setTimeout(()=&gt;{</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>    //</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>改变</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '> foo </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的内存指向</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>	exports.foo=&apos;haha&apos;;</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>},1000)</p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>/*************** b.js**********************/</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>const  { foo }  = require(&apos;./a.js&apos;); //</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>拷贝了</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '> foo</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>属性指向</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '> {count: 0} </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>内存地址的引用</span></p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>console.log(&apos;foo&apos;, foo);//&apos;foo&apos;,{count: 0}</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>window.setTimeout(()=&gt;{</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>    //</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>看！并没有改变！</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>  console.log(&apos;after 2s foo&apos;, foo);//&apos;after 2s foo &apos;,{count: 0}</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>}, 2000)</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>复制代码</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>改进：</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>/*************** b.js**********************/</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>const test = require(&apos;./a.js&apos;); </p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>//test </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>拷贝了</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '> </span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>整个输出对象</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>{foo:{count: 0} }</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>内存地址的引用</span></p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>//</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>当内存中的属性值发生变化时，可以拿到最新的值，因为指向的是同一片内存</span></p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>console.log(&apos;foo&apos;, test.foo);//&apos;foo&apos;,{count: 0}</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>window.setTimeout(()=&gt;{</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>  //</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>保证获取到的是最新的</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>  console.log(&apos;after 2s foo&apos;, test.foo);//&apos;after 2s foo &apos;,&apos;haha&apos;</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Courier"; -cocoa-font-postscriptname: "Courier"; '>}, 2000)</p><p></p><p></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>作者：骡子</p><p><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>链接：</span><span style='color: rgba(0, 0, 0, 1.000000); font: 12px "Times"; -cocoa-font-postscriptname: "Times-Roman"; '>https://juejin.im/post/5ae04fba6fb9a07acb3c8ac5</span></p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>来源：掘金</p><p style='color: rgba(0, 0, 0, 1.000000); font: 12px "Songti SC"; -cocoa-font-postscriptname: "STSongti-SC-Regular"; '>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></body>
</html>
</richcontent>
</node>
</node>
<node ID="BF498F12-53F6-4AD1-8A2C-E62956E527E9" TEXT="&#36816;&#34892;&#26102;&#21152;&#36733;" COLOR="#334752" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
<node ID="9C275022-7153-42CD-8D0B-B89669FD5171" TEXT="es6" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="5" /><font NAME="HelveticaNeue" SIZE="18" /><node ID="B34AEDFB-7E06-4121-A82B-3D70FCFC8865" TEXT="&#36755;&#20986;&#20540;&#30340;&#24341;&#29992;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="1A863958-7E74-48F9-B390-6E2AAD26103B" TEXT="&#32534;&#35793;&#26102;&#36755;&#20986;&#25509;&#21475;" COLOR="#334752" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
<node ID="2AEC0D26-9B29-4DCC-BEC6-90B649A4B00D" TEXT="&#23548;&#20837;&#30340;&#26159;&#24120;&#37327;" COLOR="#344853" POSITION="right" STYLE="fork"><edge COLOR="#389237" WIDTH="4" /><font NAME="PingFangSC-Regular" SIZE="18" /></node>
</node>
</node>
</node>
</map>
