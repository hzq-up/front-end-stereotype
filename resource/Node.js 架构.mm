<map version="1.0.0"><node ID="A2B548FD-53F3-4673-B38B-C3A738DFFE69" BACKGROUND_COLOR="#FFFFFF" TEXT="Node.js &#26550;&#26500;" COLOR="#415229" POSITION="right" STYLE="bubble"><edge COLOR="#ADD424" WIDTH="4" /><font NAME="PingFangSC-Medium" SIZE="18" /><richcontent TYPE="NOTE"><html><head></head>
<body><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>合体</p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>我们已经了解</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>顶层组件各自的概貌，现在看看它们组合在一起的工作流程，可以更透彻地理解整体架构以及各部分如何协作交互。</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>一个</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>应用启动时，</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>V8 </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>引擎会执行你写的应用代码，保持一份观察者（注册在事件上的处理函数）列表。当事件发生时，它的处理函数会被加进一个事件队列。只要这个队列还有等待执行的事件，事件循环就会持续把事件从队列中拿出，放进调用堆栈。需要注意的是，只有当前一个事件处理完毕（调用堆栈也已经清空），事件循环才会把下一个事件放进调用堆栈。</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>在调用堆栈中，所有的</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> I/O </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>请求都会转发给</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> libuv </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>处理。</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>libuv </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>会维持一个线程池，包含四个工作线程（这是默认数量，也可以修改配置增加更多工作线程）。文件系统</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> I/O </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>请求和</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> DNS </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>相关请求都会放进这个线程池处理；其他的请求，如网络、平台特性相关的请求会分发给相应的系统处理单元（参见</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> libuv </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>设计概览）。</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>安排给线程池的这些</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> I/O </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>操作由</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的底层库执行，完成之后</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> libuv </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>把此事件放回事件队列，等待主线程执行后续操作。在</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> libuv </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>处理这些异步</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> I/O </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>操作期间，主线程不会等待处理结果，而是继续忙其他事情，只有当事件循环把</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> libuv </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>返回的事件放进调用堆栈之后，主线程才会继续处理这个事件的后续操作。这就是一个事件在</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>中执行的整个生命周期。</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>mbp </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>曾经做过一个巧妙的比喻，把</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>看成一家餐厅。我在此借用下他的例子，稍作修改来阐述下</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的执行情况：</span></p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>把</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>应用程序想象成一家星巴克，一个训练有素的前台服务生（唯一的主线程）在柜台前接受订单。当很多顾客同时光临的时候，他们排队（进入事件队列）等候接待；每当服务生接待一位顾客，服务生会把订单告知给经理（</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>libuv</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>），经理安排相应的专职人员去烹制咖啡（工作线程或者系统特性）。这个专职人员会使用不同的原料和咖啡机（底层</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> C/C++ </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>组件）按订单要求制作咖啡或甜点，通常会有四个这样的专职人员保持在岗待命（线程池），高峰期的时候也可以安排更多（不过需要在一早就安排人员来上班，而不能中午临时通知）。服务生把订单转交给经理之后不需要等着咖啡制作完成，而是直接开始接待下一位顾客（事件循环放进调用堆栈的另一个事件），你可以把当前调用堆栈里的事件看成是站在柜台前正在接受服务的顾客。</span></p><p></p><p style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>当咖啡完成时，会被发送到顾客队列的最后位置，等它移动到柜台前服务生会叫相应顾客的名字，顾客就来取走咖啡（最后这部分在真实生活中听起来有点怪，不过你从程序执行的角度理解就比较合乎情理了）。</p><p></p><p><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>以上就是</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的内部顶层组件架构概览，以及它的事件循环机制。本文依然是非常精简概括，还有很多问题和细节没有展开，如重</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> CPU </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>操作的处理、</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '>Node.js </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>设计模式等，未来会有更多文章阐述这些内容（译注：在</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Aren Li </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>的</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Medium </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>专栏</span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '> Yet Another Node.js Blog </span><span style='color: rgba(58, 58, 58, 1.000000); font: 15px "PingFang SC"; -cocoa-font-postscriptname: "PingFangSC-Regular"; '>里）。</span></p></body>
</html>
</richcontent>
<node ID="CBE4BD64-6598-45A2-A4B8-3F2FAE1B44A7" TEXT="" COLOR="#46443C" POSITION="right" STYLE="fork"><edge COLOR="#48B04B" WIDTH="6" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="4B4B5CC4-397F-477C-90C8-AA45591883BD" TEXT="&#35299;&#37322;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="F510C697-36A1-4BA6-B3F5-441487224F17" TEXT="V8&#65306;Google &#24320;&#28304;&#30340;&#39640;&#24615;&#33021; JavaScript &#24341;&#25806;&#65292;&#20197; C++ &#23454;&#29616;&#12290;&#36825;&#20063;&#26159;&#38598;&#25104;&#22312; Chrome &#20013;&#30340; JS &#24341;&#25806;&#12290;V8 &#23558;&#20320;&#20889;&#30340; JavaScript &#20195;&#30721;&#32534;&#35793;&#20026;&#26426;&#22120;&#30721;&#65288;&#25152;&#20197;&#23427;&#36229;&#32423;&#24555;&#65289;&#28982;&#21518;&#25191;&#34892;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="261196BE-6100-4905-96E1-21E144B7C829" TEXT="libuv&#65306;&#25552;&#20379;&#24322;&#27493;&#21151;&#33021;&#30340; C &#24211;&#12290;&#23427;&#22312;&#36816;&#34892;&#26102;&#36127;&#36131;&#19968;&#20010;&#20107;&#20214;&#24490;&#29615;&#65288;Event Loop&#65289;&#12289;&#19968;&#20010;&#32447;&#31243;&#27744;&#12289;&#25991;&#20214;&#31995;&#32479; I/O&#12289;DNS &#30456;&#20851;&#21644;&#32593;&#32476; I/O&#65292;&#20197;&#21450;&#19968;&#20123;&#20854;&#20182;&#37325;&#35201;&#21151;&#33021;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
<node ID="423EBF20-9D76-4027-8C90-CC90CA413DDB" TEXT="&#20854;&#20182; C/C++ &#32452;&#20214;&#21644;&#24211;&#65306;&#22914; c-ares&#12289;crypto (OpenSSL)&#12289;http-parser &#20197;&#21450; zlib&#12290;&#36825;&#20123;&#20381;&#36182;&#25552;&#20379;&#20102;&#23545;&#31995;&#32479;&#24213;&#23618;&#21151;&#33021;&#30340;&#35775;&#38382;&#65292;&#21253;&#25324;&#32593;&#32476;&#12289;&#21387;&#32553;&#12289;&#21152;&#23494;&#31561;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="E4F53ED4-4FE3-4E0D-A527-78144D37BF53" TEXT="&#24212;&#29992;/&#27169;&#22359;&#65288;Application/Modules&#65289;&#65306;&#36825;&#37096;&#20998;&#23601;&#26159;&#25152;&#26377;&#30340; JavaScript &#20195;&#30721;&#65306;&#20320;&#30340;&#24212;&#29992;&#31243;&#24207;&#12289;Node.js &#26680;&#24515;&#27169;&#22359;&#12289;&#20219;&#20309; npm install &#30340;&#27169;&#22359;&#65292;&#20197;&#21450;&#20320;&#20889;&#30340;&#25152;&#26377;&#27169;&#22359;&#20195;&#30721;&#12290;&#20320;&#33457;&#36153;&#30340;&#20027;&#35201;&#31934;&#21147;&#37117;&#22312;&#36825;&#37096;&#20998;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="BAE9E0EF-9DD1-461C-B6C9-7309F96E1AD6" TEXT="&#32465;&#23450;&#65288;Bindings&#65289;&#65306;Node.js &#29992;&#20102;&#36825;&#20040;&#22810; C/C++ &#30340;&#20195;&#30721;&#21644;&#24211;&#65292;&#31616;&#21333;&#26469;&#35828;&#65292;&#23427;&#20204;&#24615;&#33021;&#24456;&#22909;&#12290;Binding &#26159;&#19968;&#20123;&#33014;&#27700;&#20195;&#30721;&#65292;&#33021;&#22815;&#25226;&#19981;&#21516;&#35821;&#35328;&#32465;&#23450;&#22312;&#19968;&#36215;&#20351;&#20854;&#33021;&#22815;&#20114;&#30456;&#27807;&#36890;&#12290;&#22312; Node.js &#20013;&#65292;binding &#25152;&#20570;&#30340;&#23601;&#26159;&#25226; Node.js &#37027;&#20123;&#29992; C/C++ &#20889;&#30340;&#24211;&#25509;&#21475;&#26292;&#38706;&#32473; JS &#29615;&#22659;&#12290;&#36825;&#20040;&#20570;&#30340;&#30446;&#30340;&#20043;&#19968;&#26159;&#20195;&#30721;&#37325;&#29992;&#65306;&#36825;&#20123;&#21151;&#33021;&#24050;&#32463;&#26377;&#29616;&#23384;&#30340;&#25104;&#29087;&#23454;&#29616;&#65292;&#27809;&#24517;&#35201;&#21482;&#26159;&#22240;&#20026;&#25442;&#20010;&#35821;&#35328;&#29615;&#22659;&#23601;&#37325;&#20889;&#19968;&#36941;&#65292;&#22914;&#26524;&#26725;&#25509;&#35843;&#29992;&#19968;&#19979;&#23601;&#36275;&#22815;&#30340;&#35805;&#12290;&#21478;&#19968;&#20010;&#21407;&#22240;&#26159;&#24615;&#33021;&#65306;C/C++ &#36825;&#26679;&#30340;&#31995;&#32479;&#32534;&#31243;&#35821;&#35328;&#36890;&#24120;&#37117;&#27604;&#20854;&#20182;&#39640;&#38454;&#35821;&#35328;&#24615;&#33021;&#26356;&#39640;&#65292;&#25152;&#20197;&#25226;&#20027;&#35201;&#28040;&#32791; CPU &#30340;&#25805;&#20316;&#20197; C/C++ &#20195;&#30721;&#26469;&#25191;&#34892;&#26356;&#21152;&#26126;&#26234;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="D992D4F0-5532-4A11-B675-70CA0785B087" TEXT="C/C++ Addons&#65306;Binding &#20165;&#26725;&#25509; Node.js &#26680;&#24515;&#24211;&#30340;&#19968;&#20123;&#20381;&#36182;&#65292;zlib&#12289;OpenSSL&#12289;c-ares&#12289;http-parser &#31561;&#12290;&#22914;&#26524;&#20320;&#24819;&#22312;&#24212;&#29992;&#31243;&#24207;&#20013;&#21253;&#21547;&#20854;&#20182;&#31532;&#19977;&#26041;&#25110;&#32773;&#20320;&#33258;&#24049;&#30340; C/C++ &#24211;&#30340;&#35805;&#65292;&#38656;&#35201;&#33258;&#24049;&#23436;&#25104;&#36825;&#37096;&#20998;&#33014;&#27700;&#20195;&#30721;&#12290;&#20320;&#20889;&#30340;&#36825;&#37096;&#20998;&#33014;&#27700;&#20195;&#30721;&#23601;&#31216;&#20026; Addon&#12290;&#21487;&#20197;&#25226; Binding &#21644; Addon &#35270;&#20026;&#36830;&#25509; JavaScript &#20195;&#30721;&#21644; C/C++ &#20195;&#30721;&#30340;&#26725;&#26753;&#12290;" COLOR="#36342E" POSITION="right" STYLE="fork"><edge COLOR="#35BAB1" WIDTH="5" /><font NAME="HelveticaNeue-Light" SIZE="21" /></node>
</node>
<node ID="71DA921D-304C-40BC-84C7-C8F7D8C01762" TEXT="&#26415;&#35821;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#259BBA" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /><node ID="F9F599DE-D120-4C27-BADF-DFF27EE047B1" TEXT="I/O&#65306;&#20195;&#25351;&#37027;&#20123;&#20027;&#35201;&#30001;&#35745;&#31639;&#26426; I/O &#23376;&#31995;&#32479;&#22788;&#29702;&#30340;&#25805;&#20316;&#12290;&#37325; I/O &#25805;&#20316;&#65288;I/O-bound operations&#65289;&#36890;&#24120;&#20250;&#29301;&#28041;&#21040;&#30913;&#30424;&#25110;&#39537;&#21160;&#22120;&#35775;&#38382;&#65292;&#20363;&#22914;&#25968;&#25454;&#24211;&#35775;&#38382;&#25110;&#25991;&#20214;&#31995;&#32479;&#30456;&#20851;&#25805;&#20316;&#12290;&#31867;&#20284;&#30340;&#27010;&#24565;&#36824;&#26377;&#37325; CPU &#25805;&#20316;&#65288;CPU-bound&#65289;&#12289;&#37325;&#20869;&#23384;&#25805;&#20316;&#65288;Memory-bound&#65289;&#31561;&#31561;&#12290;&#23427;&#20204;&#30340;&#21306;&#20998;&#26159;&#26681;&#25454;&#31995;&#32479;&#21738;&#37096;&#20998;&#24615;&#33021;&#23545;&#36825;&#20010;&#25805;&#20316;&#26377;&#26368;&#22823;&#30340;&#24433;&#21709;&#12290;&#27604;&#22914;&#23545;&#20110;&#26576;&#39033;&#25805;&#20316;&#32780;&#35328;&#65292;CPU &#36816;&#31639;&#33021;&#21147;&#25552;&#39640;&#21487;&#20197;&#24102;&#26469;&#26368;&#22823;&#30340;&#25552;&#21319;&#65292;&#36825;&#39033;&#25805;&#20316;&#23601;&#23646;&#20110;&#37325; CPU &#25805;&#20316;&#12290;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#259BBA" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="3766AE2A-AE1A-4C13-B8B7-05E9E958591F" TEXT="&#38750;&#38459;&#22622;/&#24322;&#27493;&#65306;&#24403;&#19968;&#39033;&#35831;&#27714;&#21457;&#26469;&#65292;&#24212;&#29992;&#31243;&#24207;&#20250;&#22788;&#29702;&#36825;&#20010;&#35831;&#27714;&#65292;&#20854;&#20182;&#25805;&#20316;&#38656;&#35201;&#31561;&#36825;&#20010;&#35831;&#27714;&#22788;&#29702;&#23436;&#25104;&#25165;&#33021;&#25191;&#34892;&#12290;&#35299;&#20915;&#21150;&#27861;&#21487;&#20197;&#26159;&#24341;&#20837;&#22810;&#22788;&#29702;&#22120;&#21644;&#65288;&#25110;&#65289;&#22810;&#32447;&#31243;&#26550;&#26500;&#65292;Node.js &#37319;&#29992;&#20102;&#21478;&#19968;&#31181;&#26041;&#24335;&#65292;&#19981;&#20877;&#20026;&#27599;&#20010;&#35831;&#27714;&#24320;&#21551;&#19968;&#20010;&#26032;&#30340;&#32447;&#31243;&#65292;&#32780;&#26159;&#25152;&#26377;&#35831;&#27714;&#37117;&#22312;&#21333;&#19968;&#30340;&#20027;&#32447;&#31243;&#20013;&#22788;&#29702;&#65292;&#20063;&#21482;&#20570;&#36825;&#20040;&#19968;&#20214;&#20107;&#24773;&#65306;&#22788;&#29702;&#35831;&#27714;&#8212;&#8212;&#35831;&#27714;&#20013;&#21253;&#21547;&#30340; I/O &#25805;&#20316;&#22914;&#25991;&#20214;&#31995;&#32479;&#35775;&#38382;&#12289;&#25968;&#25454;&#24211;&#35835;&#20889;&#31561;&#65292;&#37117;&#20250;&#36716;&#21457;&#32473;&#30001; libuv &#31649;&#29702;&#30340;&#24037;&#20316;&#32447;&#31243;&#21435;&#25191;&#34892;&#12290;&#20063;&#23601;&#26159;&#35828;&#65292;&#35831;&#27714;&#20013;&#30340; I/O &#25805;&#20316;&#26159;&#24322;&#27493;&#22788;&#29702;&#30340;&#65292;&#32780;&#38750;&#22312;&#20027;&#32447;&#31243;&#19978;&#36827;&#34892;&#12290;&#36825;&#20010;&#21150;&#27861;&#23601;&#20351;&#24471;&#20027;&#32447;&#31243;&#20174;&#19981;&#20250;&#38459;&#22622;&#65292;&#22240;&#20026;&#25152;&#26377;&#32791;&#26102;&#30340;&#20219;&#21153;&#37117;&#20998;&#37197;&#21040;&#20102;&#21035;&#22788;&#12290;&#20320;&#38656;&#35201;&#38754;&#23545;&#30340;&#21482;&#26377;&#21807;&#19968;&#30340;&#20027;&#32447;&#31243;&#65292;&#25152;&#26377; libuv &#31649;&#29702;&#30340;&#24037;&#20316;&#32447;&#31243;&#37117;&#19982;&#20320;&#38548;&#31163;&#24320;&#26469;&#65292;&#26080;&#38656;&#25805;&#24515;&#65292;Node.js &#20250;&#22788;&#29702;&#22909;&#37027;&#37096;&#20998;&#12290;&#22312;&#36825;&#20010;&#26550;&#26500;&#20043;&#19978;&#37325; I/O &#25805;&#20316;&#21464;&#24471;&#26684;&#22806;&#39640;&#25928;&#65292;&#37027;&#20123;&#37325; CPU&#12289;&#37325;&#20869;&#23384;&#30340;&#20063;&#19968;&#26679;&#12290;Node.js &#25552;&#20379;&#20102;&#24320;&#31665;&#21363;&#29992;&#30340;&#24322;&#27493; I/O &#35843;&#24230;&#65292;&#36824;&#26377;&#19968;&#20123;&#38024;&#23545;&#37325; CPU &#25191;&#34892;&#30340;&#22788;&#29702;&#65292;&#19981;&#36807;&#36825;&#24050;&#32463;&#36229;&#20986;&#26412;&#25991;&#35805;&#39064;&#33539;&#30068;&#20102;&#12290;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#259BBA" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="A73BFFBA-C7CE-48A5-91B5-31CCCCA06355" TEXT="&#20107;&#20214;&#39537;&#21160;&#65306;&#22522;&#26412;&#19978;&#65292;&#25152;&#26377;&#29616;&#20195;&#31995;&#32479;&#37117;&#26159;&#20027;&#31243;&#24207;&#21551;&#21160;&#23436;&#27605;&#20043;&#21518;&#65292;&#23545;&#27599;&#20010;&#25910;&#21040;&#30340;&#35831;&#27714;&#24320;&#21551;&#19968;&#20010;&#36827;&#31243;&#65292;&#25509;&#19979;&#26469;&#26681;&#25454;&#19981;&#21516;&#25216;&#26415;&#26377;&#19981;&#21516;&#30340;&#22788;&#29702;&#26041;&#24335;&#65292;&#26377;&#26102;&#24046;&#24322;&#20250;&#22823;&#30456;&#24452;&#24237;&#12290;&#20856;&#22411;&#30340;&#23454;&#29616;&#26159;&#65306;&#38024;&#23545;&#19968;&#20010;&#35831;&#27714;&#24320;&#21551;&#19968;&#20010;&#32447;&#31243;&#65292;&#19968;&#27493;&#25509;&#19968;&#27493;&#25191;&#34892;&#20219;&#21153;&#25805;&#20316;&#65292;&#22914;&#26524;&#26576;&#20010;&#25805;&#20316;&#25191;&#34892;&#32531;&#24930;&#65292;&#36825;&#20010;&#32447;&#31243;&#19978;&#30340;&#21518;&#32493;&#25805;&#20316;&#37117;&#20250;&#38543;&#20043;&#25346;&#36215;&#65292;&#30452;&#21040;&#25152;&#26377;&#25805;&#20316;&#23436;&#25104;&#65292;&#36820;&#22238;&#32467;&#26524;&#12290;&#32780;&#22312; Node.js &#20013;&#65292;&#25152;&#26377;&#30340;&#25805;&#20316;&#37117;&#27880;&#20876;&#20026;&#19968;&#20010;&#20107;&#20214;&#65292;&#31561;&#24453;&#20027;&#31243;&#24207;&#25110;&#32773;&#22806;&#37096;&#35831;&#27714;&#26469;&#35302;&#21457;&#12290;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#259BBA" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
<node ID="CE37239A-FA5E-482A-8E00-2D47B2E4D42F" TEXT="&#65288;&#31995;&#32479;&#65289;&#36816;&#34892;&#26102;&#65306;Node.js &#36816;&#34892;&#26102;&#26159;&#25351;&#25152;&#26377;&#36825;&#20123;&#20195;&#30721;&#65288;&#19978;&#36848;&#25152;&#26377;&#32452;&#20214;&#65292;&#21253;&#25324;&#24213;&#23618;&#21644;&#19978;&#23618;&#65289;&#25552;&#20379;&#32473; Node.js &#24212;&#29992;&#31243;&#24207;&#25191;&#34892;&#30340;&#29615;&#22659;&#12290;" COLOR="#36342E" POSITION="left" STYLE="fork"><edge COLOR="#259BBA" WIDTH="6" /><font NAME="PingFangSC-Light" SIZE="21" /></node>
</node>
</node>
</map>
